-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Host: localhost
-- Generation Time: Nov 18, 2021 at 09:02 AM
-- Server version: 10.1.38-MariaDB
-- PHP Version: 5.6.40

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `forum`
--

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `type` varchar(10) NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `mini_text` text,
  `view` int(10) NOT NULL,
  `thumbnail_img_url` varchar(255) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `user_id`, `type`, `title`, `content`, `mini_text`, `view`, `thumbnail_img_url`, `created_at`, `updated_at`) VALUES
(2, 1, 'network', 'What is Networking Explained with Examples', 'This tutorial explains the definition, purpose, and benefits of computer networking. Learn what computer networking is and what the advantages of computer networking are.\r\n\r\nWhat is computer networking?\r\nComputer networking is the subject that explains how computers connect for sharing resources and information and what technologies and devices they use for connectivity.\r\n\r\nBenefits of Networking\r\nComputer networking provides the following benefits.\r\n\r\nIt allows us to share data and resources.\r\nIt helps us in reducing the required number of devices.\r\nIt provides us a platform to communicate with other users in the network.\r\nIt allows multiple users to work on a single project.\r\nIt allows us to store data in a centralized location.\r\nIt allows us to implement security policies.\r\nIt allows us to track and monitor the use of resources.\r\nPurpose of Computer Networking\r\nThe main purpose of computer networking is sharing. It allows us to share mainly three things; data, resources, and applications. Let\'s understand each of these in detail.\r\n\r\nData sharing\r\nNetworking allows us to share data between connected devices. Let\'s take a simple example. Suppose two computers exchange data regularly. Without networking, the following steps are required to exchange data between them.\r\n\r\nOn the sender PC, write data on an external device (such as CD, DVD, and USB)\r\nMove that external device to the receiver PC\r\nOn the receiver PC, read or copy the data from that external device\r\nIf the data is exchanged 100 times a day, we have to follow these steps 100 times a day. In such a situation, where the data is often exchanged, this method is neither convenient nor appropriate.\r\n\r\ncomputers without networking\r\n\r\nIn this case, networking is a better solution. Once networking is done, we can exchange any amount of data between connected devices at any time without using any external device.\r\n\r\ncomputers with networking\r\n\r\nResources Sharing\r\nNetworking allows us to share devices among computers. By sharing the devices, we can reduce the number of required components in the network. Let\'s understand this with a simple example.\r\n\r\nIn a small office, four computers are used. Computers are not connected. Each computer generates some print jobs daily.\r\n\r\nTo fulfill the print requirement of each computer, without networking, we have to buy four printers; one for each.\r\n\r\nsharing resources in network\r\n\r\nBy connecting these computers through networking, we can reduce the required number of printers up to one. Once networking is done, only one printer will be sufficient to meet the print requirement of all computers.\r\n\r\nsharing printer in network\r\n\r\nWhen we reduce the number of essential devices, the cost of the network is also reduced. In the preceding example, without networking, we need four printers whereas, with networking, we only need one printer. Thus, through networking, we can save the cost of three printers.\r\n\r\nThere are two types of devices: -\r\n\r\nShareable: - Devices that can be shared in the network such as hard disk, printer, modem, scanner, CD, DVD, USB, etc.\r\n\r\nNon-Shareable: - Devices that cannot be shared in the network such as CPU, RAM, Motherboard, Monitor, etc.\r\n\r\nAlthough advanced networking techniques, such as cloud computing, allow us to share any resource including the CPU and the RAM, yet for the initial level, you should stick with the traditional types listed above: shareable and non-shareable. This will help you in understanding the complex networking concepts in a simple way.\r\n\r\nApplication Sharing\r\nJust like data and resources, through networking, we can also share applications. In Application sharing, an application is installed in two parts; server application and client application. Both parts are used to provide and request the service or data, respectively.\r\n\r\nLet\'s take a simple example.\r\n\r\nA user connects his system to the Internet and watches a video on YouTube. YouTube, which provides the requested video, is an example of a server application. And the browser or the app, that the user uses to watch the video, is an example of a client application.\r\n\r\napplication sharing\r\n\r\nApplication sharing is mostly used in a company environment. In companies, usually, a project is assigned to several users or a team that has several members. Networking allows concerned users or members to work on the assigned project simultaneously. Besides this, it is also used for troubleshooting and accessing a networking device or a computer remotely.\r\n\r\nNetworking is not necessary always\r\nNetworking is a complex process. Adding devices in a network requires special networking devices such as cables, switches, routers, etc. In addition, to add a computer to the network, we also have to adjust or change its configuration settings.\r\n\r\nNetworking should be done only when it is required. For example, for data sharing, it should be done only when the data that needs to be shared is in a large amount, or it is often exchanged. For example, if you only need to share a single file between two PCs, setting up networking in this situation is a completely worthless idea.\r\n\r\nThat\'s all for this tutorial. If you like this tutorial, please share it with friends through your favorite social networking sites.', 'This tutorial explains the definition, purpose, and benefits of computer networking. Learn what computer networking is and what the advantages of computer networking are.', 0, '/uploads/img/1636992765.png', '2021-09-26 13:33:46', '2021-09-26 13:33:46'),
(3, 1, 'network', 'Grep Command in Linux Explained with Practical Examples', '<div class=\"item-page\">\r\n                   <div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains how to use grep command in Linux with practical examples such as performing case insensitive search, printing lines numbers and displaying number of lines before and after every match in grep output.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>The grep command allows us to extract any information from any file. As Linux stores settings and configurations in text files, knowing how to use the grep command not only helps in exams but also boosts confidence on job.</p>\r\n<div class=\"art-part-block\">\r\n<p>This tutorial is the second part of the article \"grep command in Linux explained with options and regular expressions\". Other parts of this article are following.</p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/rhce-study-guide/grep-options-regex-parameters-and-regular-expressions.html\" target=\"_blank\">grep options, regex, parameters and regular expressions</a></p>\r\n<p><em class=\"small\">This tutorial is the first part of the article. It explains grep command options and regular expressions with the special meanings of Meta characters.</em></p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/rhce-study-guide/grep-regex-practical-examples-of-regular-expressions.html\" target=\"_blank\">grep regex practical examples of regular expressions</a></p>\r\n<p><em class=\"small\">This tutorial is the third part of the article. It explains how to use regular expressions with grep command in detail with practical examples.</em></p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/rhce-study-guide/use-extended-regular-expressions-with-grep-command.html\" target=\"_blank\">use extended regular expressions with grep command</a></p>\r\n<p><em class=\"small\">This tutorial is the fourth part of the article. It explains how to use extended regular expressions with grep command in detail with practical examples.</em></p>\r\n</div>\r\n<p>For demonstration purpose, I will use the practice lab which I created in the first part of this article.</p>\r\n<h3>How to search a sentence or a search pattern that contains white space</h3>\r\n<p>To search a sentence or multiple words which contain white space, we have to enclose them with quotes.\r\nIf we do not enclose the white space then grep searches only the first word from the specified sentence.\r\n Remaining words are treated as files where grep searches for the specified pattern.\r\n To see it practically, let\'s search a user name <b>Sanjay Gupta</b> in file <b>userdata</b> without quote and with quote.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep Sanjay Gupta userdata\r\n#grep \"Sanjay Gupta\" userdata\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>Following figure shows both commands with output.</p>\r\n<p> <img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-01-search-sentence.png\" alt=\"grep search multiple words or sentence\" src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-01-search-sentence.png\"></p>\r\n<p>As we can see in above output, when we did not enclose the string <b>Sanjay Gupta</b> with quotes,\r\n only the word <b>Sanjay</b> was searched and the word <b>Gupta</b> was taken as file path.\r\n But when we enclosed the string <b>Sanjay Gupta</b> with quotes, it was considered as a search string.</p>\r\n<h3>How to perform a case insensitive search with grep</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>By default, grep matches case. It means, for grep the word <b>sanjay</b> and the word <b>Sanjay</b> are two different words.\r\n If you search the word <b>sanjay</b>, it will not display the lines which contain the word <b>Sanjay</b>.\r\n  Vice versa if you search the word <b>Sanjay</b>, it will not display the lines which contain the word <b>sanjay</b>. To see it in action,\r\n  let\'s search both words in our practice file <b>userdata</b>.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep Sanjay userdata\r\n#grep sanjay userdata\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>To perform a case insensitive search with grep command, use <b>–i</b> option. The <b>–i</b> option instructs grep command to ignore the\r\ncase while matching the pattern. Let\'s perform one more search for the same word <b>sanjay</b>, but this time use <b>–i</b> option with grep command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep -i sanjay userdata\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>Following figure illustrates above commands with output.</p>\r\n<p> <img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-02-grep-sanjay-cash-sensetive.png\" alt=\"grep case insensitive search\" src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-02-grep-sanjay-cash-sensetive.png\"></p>\r\n<p>As we can see in above output, without <b>–i</b> option, grep matched exact word but with this option it ignored the case.</p>\r\n<h3> How to print line numbers in grep command output</h3>\r\n<p>By default, grep does not print line numbers in output. But if require, you can ask it to print the line numbers along with lines.\r\nTo print number of lines, use <b>-n</b> option. For example, following command search a keyword <b>Host</b> in file <i>/etc/ssh/ssh_config</i> and print\r\n the output with line numbers.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep –n Host /etc/ssh/ssh_config\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-03-line-number.png\" alt=\"grep print line numbers\" src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-03-line-number.png\"></p>\r\n<h3>How to search all files and directories recursively with grep command</h3>\r\n<p>The grep command supports recursive search. It can search in all files and directories recursively.\r\nTo perform a recursive search, use <b>-r</b> option with grep command.</p>\r\n<p>If this option is used, grep first searches all files of the specified directory. If specified directory contains another directory,\r\n it also searches that directory and all of its subdirectories as well.</p>\r\n<p>In our lab, we created a multilevel directory structure. We also created a file named <b>custom_file</b> in the last\r\ndirectory of this structure. This file contains some dummy text string.  Let\'s find that string from the root directory.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep -r xxx123 rhcelab\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>In above command, <b>xxx123</b> is the search pattern and <b>rhcelab</b> is the main or parent directory.</p>\r\n<p> <img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-04-serarch-in-multiple-files.png\" alt=\"grep recursive search\" src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-04-serarch-in-multiple-files.png\"></p>\r\n<p>If you want to search only in few files, instead of searching in all file recursively you can search only in desired files. The grep allows us to specify multiple files name as arguments.\r\nFor example, to search the text string <b>\"test\"</b> in <i>file1, file2, file3</i> and <i>file4</i>, you can use following command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep test file1 file2 file3 file4\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<h3>How to print file names which contains the specified pattern with grep command</h3>\r\n\r\n<p>If you don\'t know which file contains the specified pattern, you can perform a file name search with grep command.\r\nFor example, suppose you don\'t know which files in <i>/etc/</i> directory contain IP configuration or IP related settings.\r\nIn this case, you can ask grep to search all files in <i>/etc/</i> directory for keyword <b>\"IP address\"</b> and print their names at command\r\n prompt with following command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep –r –l \"ip address\" /etc/\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p> <img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-05-search-keyword-in-files.png\" alt=\"grep print file name\" src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-05-search-keyword-in-files.png\"></p>\r\n<p>The <b>-l</b> option asks grep to print the name of file which contains the specified pattern instead of the lines of that file which contain the pattern.</p>\r\n<h3>How to show number of lines before every match</h3>\r\n<p>The grep allows us to print the number of lines before every match.\r\nTo show the number of lines before every match, use <b>–B</b> option. For example,\r\nfollowing command shows 2 lines before every match.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep –B 2 \"DocumentRoot\" /etc/httpd/conf/httpd.conf\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p> <img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-06-before-pattern-lines.png\" alt=\"grep show line before match\" src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-06-before-pattern-lines.png\"></p>\r\n<h3>How to print next lines after every match</h3>\r\n<p>Just like the previous lines, you can also print next lines after every match.\r\nTo print the next lines after every match, use <b>–A</b> option with grep command.\r\nFor example, following command print next 2 lines after every match.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep –A 2 \"DocumentRoot\" /etc/httpd/conf/httpd.conf\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-07-after-pattern-line.png\" alt=\"grep show line after match\" src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-07-after-pattern-line.png\"></p>\r\n<h3>How to show line before and after every match</h3>\r\n<p>Since grep allows us to specify multiple options, we can combine both <b>–A</b> and <b>–B</b> options to print the number\r\nof lines before and after every match. For example, following command prints 1 line before and after every match.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#grep –B 1 –A 1 \"DocumentRoot\" /etc/httpd/conf/httpd.conf\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p> <img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-08-before-and-after-pattern-lines.png\" alt=\"grep show lines before and after match\" src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg14-08-before-and-after-pattern-lines.png\"></p>\r\n<p>That\'s all for this part. In next part of this tutorial, I will explain how to use regular expressions with grep command in detail.\r\nIf you like this tutorial, please share it with friends through your favorite social platform.</p>\r\n</div>\r\n\r\n                    </div>\r\n                   \r\n                      <div class=\"article-info\">\r\n                         <p>\r\n                             <span class=\"bd-user\"></span> By <a href=\"https://www.computernetworkingnotes.com/site/about.html\" target=\"_blank\">ComputerNetworkingNotes</a>\r\n                                                         <span class=\"bd-page-refresh\"></span> Updated on 2021-06-25 10:04:38 IST\r\n                         </p>\r\n                     </div>\r\n                                             <div class=\"article-navigation\" style=\"border-top: 1px solid #c1cfdd;\">\r\n                         <div class=\"article-breadcrumb\">\r\n                            <p>\r\n                               <span class=\"bd-house\"></span>\r\n                               <a href=\"https://www.computernetworkingnotes.com\"> ComputerNetworkingNotes</a>\r\n                               <span class=\"bd-angle-right\"></span>\r\n                               <a href=\"https://www.computernetworkingnotes.com/linux-tutorials/\"> Linux Tutorials</a>\r\n                               <span class=\"bd-angle-right\"></span>\r\n                               Grep Command in Linux Explained with Practical Examples                               <span class=\"bd-angle-down\"></span>\r\n                            </p>\r\n                         </div>\r\n                         <div class=\"article-pagination\">\r\n                            \r\n\r\n	<div class=\"float-left\">\r\n		<a title=\"Difference between Linux distributions\" href=\"/linux-tutorials/difference-between-linux-distributions.html\">\r\n			 <span class=\"bd-hand-left\"></span> Difference between Linux distributions		</a>\r\n	</div>\r\n	<div class=\"float-right\">\r\n		<a title=\"Setting Date, Time, and Time Zone on Ubuntu Linux\" href=\"/linux-tutorials/setting-date-time-and-time-zone-on-ubuntu-linux.html\">\r\n			  Setting Date, Time, and Time Zone on Ubuntu Linux <span class=\"bd-hand-right\"></span>\r\n		</a>\r\n	</div>\r\n                         </div>\r\n                         <div class=\"clearfix\"></div>\r\n                      </div>\r\n                                      </div>', 'This tutorial explains how to use grep command in Linux with practical examples such as performing case insensitive search, printing lines numbers and displaying number of lines before and after every match in grep output.', 0, '/uploads/img/1636992765.png', '2021-09-27 00:34:51', '2021-09-27 00:34:51'),
(4, 1, 'network', 'Networking  Basic Concepts and Fundamentals Explained', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains the basic concepts of computer networking. Learn the essential networking topics in detail with examples.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Computer networking is one of the most complex subjects. Describing all of its topics requires an encyclopedia. Learning and understanding all these topics at the primary stage are neither required nor recommended. It is just like learning the vocabulary from the dictionary.  Unless you know what you need to know, you will never know what you want to know. In this tutorial, I will discuss two essential topics that you should learn at the elementary level. Understanding these topics will set the foundation for the rest of your studies.</p>\r\n<h3>Essential components of the computer network</h3>\r\n<p>When learning computer networking, this should be your first topic.</p>\r\n<p>A computer network is made up of four essential components. These components are End devices, Media, Protocols, and Networking devices. Let\'s discuss these components in detail.</p>\r\n<h3>End devices</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>An end device is a device that sends or receives the data in the network. It can be a PC, Laptop, Smartphone, or any other device that is capable of sending and receiving data and is connected with the network. To build a network, at least two end devices are required.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt02-01-end-devices.png\" alt=\"end devices\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt02-01-end-devices.png\"></p>\r\n<p>Broadly end devices are categorized into two types; server end device and client end device. The server end device is the device that provides data or service. The client end device is the device that receives the offered data or service from the server end device.</p>\r\n<h3>Media</h3>\r\n<p>The media provides connectivity between the end devices. Unless end devices are connected through media, they cannot exchange the data or service. Mainly there are two types of media; Wireless media and wired media.</p>\r\n<p>In wireless media, radio signals are used to transfer the data between end devices, whereas, in wired media, the data is transferred through cables.</p>\r\n<p>Both media types are further classified into several subtypes. Subtypes are categorized based on various factors such as length, data transfer speed, used metal, frequency band, etc. Subtypes are defined as the media standards. Two common media standards are the Ethernet and the IEEE802.11 or Wi-Fi standards.</p>\r\n<p> <img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt02-02-media-type.png\" alt=\"media types\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt02-02-media-type.png\"></p>\r\n<p>The Ethernet defines the standards for the wired media. The IEEE802.11 defines the standards for wireless media.</p>\r\n<h3>Protocols</h3>\r\n<p>Protocols enable communication between two or more end devices. A protocol is a set of predefined rules that specifies standards for a particular stage or all stages of the communication.</p>\r\n<p>Following are some common functions performed by the protocols.</p>\r\n<ul class=\"ul-arrow\">\r\n  <li>	Initializing and terminating the communication process</li>\r\n  <li>	Performing encryption and compression before sending the data</li>\r\n  <li>	Packing data in such a format that it can travel in the network</li>\r\n  <li>	Providing logical addressing</li>\r\n  <li>	Performing error correction</li>\r\n  <li>	Performing authentication</li>\r\n</ul>\r\n<p>Two popular networking models: the OSI Reference Model and the TCP/IP Model describe the functionalities of the most common protocols. Both models divide the entire communication process into logical layers. Further, they explain how the protocols work in each layer to enable the communication process.</p>\r\n<h3>Networking device</h3>\r\n<p>A networking device works between the end devices. It controls and forwards the flow of data. Based on the functionalities, a networking device can be categorized into three types; forwarding device, connecting device, and securing device.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt02-03-protcols.png\" alt=\"http protocol example\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt02-03-protcols.png\"></p>\r\n<p>A forwarding device forwards the data. This device usually has multiple ports which are used to connect more than two end devices in a single network. Hub, bridge, and Ethernet switch provide this functionality.</p>\r\n<p>A connecting device connects two or more different types of media and protocols. If two end devices are located in different logical networks or connected through the different types of media, they need a connecting device to exchange the data. Router and Multilayer switch provides this functionality.</p>\r\n<p>A securing device secures the data from unauthorized access. When a data packet arrives in it, based on pre-defined rules it performs security checks and takes the forwarding decision. Common devices which provide this functionality are the Firewall and NAT.</p>\r\n<h3>Classification of the computer network</h3>\r\n<p>After learning the essential components of the network, this should be your next topic. Computer networks are mainly categorized based on the geographical location, access types, and relationship between end devices.</p>\r\n<h4>Based on the geographical location</h4>\r\n<p>Based on the geographical location, a network can be classified into three types: LAN, MAN, and WAN. A network that is geographically spread over a small, medium, and large area are respectively known as the LAN, MAN, and WAN network.</p>\r\n<h4>Based on the access type</h4>\r\n<p>Based on allowing users to access network resources, the network is classified into three types; Intranet, Extranet, and the Internet. An Intranet is a private network. In this network, external users are not allowed to access the network resources. An Extranet is also a private network. But in this network, after proper authorization, external users are allowed to access a small portion of the network. The Internet is the public network. Any user can connect with this network.</p>\r\n<h4>Based on the relationship between the end devices</h4>\r\n<p>Based on how the end devices access each other, the network is categorized into two types; peer-to-peer network and clients/server network. In peer to peer network, all end devices have equal rights. In the clients/server network, the server decides which client will have what rights.</p>\r\n<p>That’s all for this tutorial. If you like this tutorial, please don’t forget to share it through your favorite social networking sites.</p>\r\n</div>                    </div>', 'This tutorial explains the basic concepts of computer networking. Learn the essential networking topics in detail with examples.', 0, '/uploads/img/1636992765.png', '2021-09-27 02:08:38', '2021-09-27 02:08:38'),
(5, 1, 'network', 'Computer Networking Devices Explained with Function', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains the functions of the most common and essential networking devices such as Hubs, Switches, Routers, Bridges, Modems, NICs, Proxies, and Gateways.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<h3>Network Interface Card (NIC)</h3>\r\n<p>NIC stands on the top of the list of network devices. Networking cannot be done without this device. It is also known as a network adapter card, Ethernet card, or LAN card. A NIC allows a networking device to communicate with other networking devices.</p>\r\n<p>A NIC converts data packets between two different data transmission technologies. A PC uses parallel data transmission technology to transmit data between its internal parts whereas the media that provides connectivity between different PCs uses serial data transmission technology. A NIC converts a parallel data stream into the serial data stream and a serial data stream into the parallel data stream.</p>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>The following image shows how a NIC works.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-01-nic-functions.png\" alt=\"nic functions\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-01-nic-functions.png\"></p>\r\n<p>Typically, all modern PCs have integrated NICs. If additional NICs are required, they can be installed as add-on devices.</p>\r\n<p>For desktop or server systems, they are available as adapters that can be plugged into an available slot on the motherboard. For laptops or other smaller-sized devices, they are available in PCMCIA (International Association of Personal Computer Memory Cards) card form that can be inserted into a PCMCIA slot.</p>\r\n<h4>Types of NICs</h4>\r\n<p>There are two types of NICs: media-specific and network design specific</p>\r\n<p><b>Media Specific</b>: - A media-specific NIC supports a particular type of media. For example, to connect a coaxial cable, you need a NIC that has the BNC port whereas to connect an Ethernet cable, you need a NIC that has the RJ-45 port.</p>\r\n<p><b>Network Design Specific</b>: - A network design-specific NIC supports a specific network topology. For example, FDDI, Token Ring, and Ethernet have their distinctive type of NIC cards. They cannot use other types of NIC cards.</p>\r\n<p>The following image shows some common types of NICs.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-02-types-of-nic-cards.jpg\" alt=\"types of nics\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-02-types-of-nic-cards.jpg\"></p>\r\n<h3>Hub</h3>\r\n\r\n<p>A hub is a centralized device that connects multiple devices in a single LAN network. When a hub receives a data signal from a connected device on one of its ports, except for that port, it forwards those signals from the remaining ports to all other connected devices. Typically, a hub has one or more uplink ports that are used to connect it to another hub.</p>\r\n<p>There are two types of the Hub.</p>\r\n<p><b>Passive Hub</b>: - A passive hub forwards data signals as it receives them. It does not change data signals in any manner.</p>\r\n<p><b>Active Hub</b>: - An active hub also forwards data signals. But, before forwarding them, it amplifies them. Due to this added feature, an active Hub is also called a repeater.</p>\r\n<p>The following image shows an active hub and a passive hub.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-03-hub.jpg\" alt=\"networking device hub\"></p>\r\n<p>Hubs are no longer used in computer networks.</p>\r\n<h3>MAU and Patch panel</h3>\r\n<p>An MAU and a patch panel look like a hub, but they are different. An MAU (Multi-Access Unit) is a replacement for a hub for a token ring network.</p>\r\n<p>Differences between Hub and MAU are the following.</p>\r\n<ul class=\"ul-arrow\">\r\n  <li> Hub is used for Ethernet network while MAU is used for Token Ring network.</li>\r\n  <li> Hub logically forms the star topology while MAU logically forms the ring topology.</li>\r\n</ul>\r\n<p>The following image shows an MAU.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-04-mau.jpg\" alt=\"mau\"></p>\r\n<p>A patch panel is used to organize the UTP cables systematically. It doesn\'t interfere with the data signals.</p>\r\n<p>The following image shows a patch panel.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-05-patch-panel.jpg\" alt=\"patch panel\"></p>\r\n<h3>Bridge</h3>\r\n<p>A bridge is used to divide a large network into smaller segments. The basic functions of a bridge are the following: -</p>\r\n<ul class=\"ul-arrow\">\r\n  <li>	Breaking a large network into smaller segments.</li>\r\n  <li>	Connecting different media types such as UTP and fiber optic.</li>\r\n  <li>	Connecting different network architectures such as Ethernet and the Token ring.</li>\r\n</ul>\r\n<p>The following image shows an example of a bridge.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-06-bridge-network-segmentation.jpg\" alt=\"functions of bridge\"></p>\r\n<p>A bridge can connect two different types of media or network architecture, but it cannot connect two different types of network layer protocols such as TCP/IP or IPX. It requires the same network-layer protocols across all segments.</p>\r\n<p>There are three types of bridge:-</p>\r\n<p><b>Local Bridge</b>: - The Bridge directly connects two LAN segments. In Ethernet implementations, this is known as a transparent bridge. In the Token Ring network, this is called a source-routed bridge.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-07-bridge-local.png\" alt=\"local bridge\"></p>\r\n<p><b>Remote Bridge</b>: - This Bridge connects with another Bridge over the WAN link.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-08-bridge-remote-connection.png\" alt=\"remote bridge\"></p>\r\n<p><b>Wireless Bridge</b>: - This Bridge connects with another Bridge without using wires. It uses radio signals for connectivity.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-09-bridge-wireless.png\" alt=\"wireless bridge\"></p>\r\n<p>In networking models such as the OSI layers model and TCP/IP model, the functionalities of Bridges are defined in the physical layer and data link layer.</p>\r\n<p>Just like a Hub, a Bridge is also no longer used in the computer network. Bridges have been replaced by switches.</p>\r\n<h3>Switch</h3>\r\n<p>Just like a hub and a bridge, a switch is also used to connect multiple devices in a LAN segment. A switch is the upgraded version of the bridge. Besides providing all the functionalities of a bridge, it also offers several additional features.</p>\r\n<p>The biggest advantage of a switch is that it makes switching decisions in hardware by using application-specific integrated circuits (ASICs).</p>\r\n<p>Unlike the generic processors that we use in our PC, ASICs are specialized processors built only to perform particular tasks. Usually, the ASICs in switches have a single task and that is switching the frames as fast as they can.</p>\r\n<p>An ASIC occupied switch performs this task blazingly fast. For example, an entry-level 2960 Catalyst Switch can process 2.7 million frames per second.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-10-switch.jpg\" alt=\"switch\"></p>\r\n<h3>Modem</h3>\r\n<p>In simple language, a modem is a device that is used to connect to the Internet. Technically, it is the device that enables digital data to be transmitted over telecommunication lines.</p>\r\n<p>A Telco company uses entirely different data transmission technology from the technology that a PC uses for data transmission. A modem understands both technologies. When it receives signals from the PC, it converts them into the format that the Telco company understands. When it receives signals from the Telco company, it converts them into a format that the PC understands.</p>\r\n<p>It enables communication between the PC (Known as the DTE device) and the Telecom company\'s office (Known as the DCE device).</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-11-modem-functions.png\" alt=\"functions of modem\"></p>\r\n<p>The following image shows some common types of modems.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-12-types-of-modem.jpg\" alt=\"types of modem\"></p>\r\n<h3>Gateway</h3>\r\n<p>Gateway is used to forward packets that originate from a local host or a local network and are intended for remote networks. If a data packet does not get its destination address in the local network then it takes the help of the gateway device to find the destination address in the remote network. The gateway device knows the path to the remote destination address. If necessary, it also encapsulates the packet so that it can travel through other networks to reach its destination address.</p>\r\n<p>The following image shows a gateway device.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-13-gateway.png\" alt=\"gateway\"></p>\r\n<p>Examples of the Gateway</p>\r\n<p><b>Email Gateway</b>: - An email gateway translates SMTP e-mails in standard X.400 format before forwarding.</p>\r\n<p><b>GSNW Gateway</b>: - A GSNW gateway allows Windows clients to access resources from the NetWare server.</p>\r\n<p><b>PAD Gateway</b>: - A PAD gateway provides connectivity between a LAN network and an X.25 network.</p>\r\n<h3>Router</h3>\r\n<p>A router connects different network segments. It switches data packets between networks that are either located in different logical segments or constructed with different network-layer protocols.</p>\r\n<p>When a router receives a data packet on any of its interfaces, it checks the destination address of that packet, and based on that destination address, forwards that data packet to the interface that is associated with the destination address.</p>\r\n<p>To forward data packets to their destination, the router keeps a record of the connected network. These records are maintained in a database table known as the routing table. Routing tables can be created statically or dynamically.</p>\r\n<p>The following image shows two routers.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-14-router.jpg\" alt=\"router\"></p>\r\n<p>The main functions of routers are the following: -</p>\r\n<ul class=\"ul-arrow\">\r\n  <li>	To connect different network segments.</li>\r\n  <li>	To connect different network protocols such as IP and IPX.</li>\r\n  <li>	To connect several smaller networks into a large network.</li>\r\n  <li>	To break a large network into smaller networks.</li>\r\n  <li>	To connect two different media types such as UTP and Fiber optical.</li>\r\n  <li>	To connect two different network architectures such as Token Ring and Ethernet.</li>\r\n  <li>	To connect LAN network with Telco company\'s office.</li>\r\n  <li>	To access DSL services.</li>\r\n</ul>\r\n<h3>Proxy</h3>\r\n<p>A proxy is used to hide the internal network from the outside world. It may be a dedicated device or maybe an application software. Once it is configured, all communication goes through it. Since external devices cannot directly access internal equipment, they cannot tamper with internal equipment.</p>\r\n<p>The following image shows an example of a proxy.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-15-proxy.jpg\" alt=\"proxy\"></p>\r\n<h3>Transceiver</h3>\r\n<p>A transceiver is a small device that can send and receive both types of signals: analog and digital. Usually, it is inbuilt in the network interface card. But, it is also available as a separate device. It detects the type of signal from the network wire and converts the signal accordingly.</p>\r\n<p>Let\'s take an example. A transceiver is attached to the device that transmits signals in digital form. Now suppose, this device is connected with the network wire that uses the analog form for data transmission. In this case, the transceiver converts digital signals into analog signals before placing them on the network wire.</p>\r\n<p>The following image shows some transceivers.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt10-16-transceiver.jpg\" alt=\"transceiver\"></p>\r\n<p>That\'s all for this tutorial. If you like this tutorial, please don\'t forget to share it with friends through your favorite social networking sites.</p>\r\n</div>\r\n                    </div>', 'This tutorial explains the functions of the most common and essential networking devices such as Hubs, Switches, Routers, Bridges, Modems, NICs, Proxies, and Gateways.', 0, '/uploads/img/1636992765.png', '2021-09-27 02:09:23', '2021-09-27 02:09:23');
INSERT INTO `posts` (`id`, `user_id`, `type`, `title`, `content`, `mini_text`, `view`, `thumbnail_img_url`, `created_at`, `updated_at`) VALUES
(6, 1, 'network', 'CSMA/CD and CSMA/CA Explained', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains CSMA/CD and CSMA/CA in detail. Learn what CSMA/CD and CSMA/CA are, how they work, and why they are used in computer networks.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<h3>What CSMA/CD and CSMA/CA are?</h3>\r\n<p>CSMA/CD and CSMA/CA are the media access methods that govern how a device can transmit data to the network. <b>CSMA/CD</b> stands for <i>Carrier Sense Multiple Access / Collision Detection</i>. <b>CSMA/CA</b> stands for <i>Carrier Sense Multiple Access/Collision Avoidance</i>.</p>\r\n<p>Both methods are used in a single collision domain. A single collision domain is a group of devices that share a collision. Since all devices share a collision, they use a method to avoid and remove the collision. Based on the media type used in the network, this method is known as either CSMA/CD or as CSMA/CA.</p>\r\n<p>If the network uses wired media, this method is known as <b>CSMA/CD</b>. If the network uses wireless media, this method is known as <b>CSMA/CA</b>.</p>\r\n<h3>How CSMA/CD works</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>In a single collision domain, only one NIC can send a frame at a time. All NICs, however, can simultaneously listen to the frame on the wire. Before a NIC puts a frame on the wire, it first senses the wire to ensure that no other frame is currently on the wire. If it is a copper wire, the NIC can detect the frame by examining the voltage levels on the wire. If it is a fiber wire, the NIC can detect the frame by examining the light frequencies on the wire. This process is known as <b>carrier sense</b>.</p>\r\n<p>If a NIC detects a frame on the wire, it waits until the frame is transmitted. A NIC transmits a frame only when it detects no frame on the wire. Sometimes two or more NICs may accidentally detect no frame at the same time. For example, two NICs want to transmit frames, and there is no frame on the wire. Since there is no frame on the wire, both NICs put their frames on the wire at the same time. This process is known as <b>multiple access</b>.</p>\r\n<p>If two or more NICs simultaneously sense the wire and see no frame, and each places its frame on the wire, a collision will occur. In this situation, the voltage levels on a copper wire and the light frequencies on a fiber wire get messed up. For example, if two NICs put the same voltage on the electrical part of the wire, the voltage level will be different from that of only one device. The two original frames become indecipherable. This process is known as <b>collision detection</b>.</p>\r\n<p>Let\'s take a simple a simple example. There are four PCs in a single collision domain. PC-1 sends data to PC-3. At the same time, PC-2 also sends data to PC-3. Since both PC-1 and PC-3 put their frames on the wire at the same time, a collision will occur.</p>\r\n<p>The following image shows this process.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/computer-network-collision.png\" src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/computer-network-collision.png\"></p>\r\n<p>If the NICs see a collision for their transmitted frames, they have to resend the frames. In this instance, each NIC that was transmitting a frame when a collision occurred creates a special signal, called a jam signal on the wire. It then waits for a small random time and senses the wire again. If no frame is currently on the wire, the NIC will then retransmit its original frame. The time that the NIC waits is measured in microseconds, a delay that can\'t be detected by a human. Likewise, the time the NICs wait is also random to help ensure a collision won\'t occur again when these NICs retransmit their frames. The more devices you place on an Ethernet segment, the more likely you will experience collisions. If you put too many devices on the segment, too many collisions will occur, seriously affecting your throughput. Therefore, you need to monitor the number of collisions on each of your network segments. The more collisions you experience, the less throughput you will get.</p>\r\n<h5>Key points</h5>\r\n\r\n<ul class=\"ul-arrow\">\r\n  <li>	This mechanism is only used in a single collision domain.</li>\r\n  <li>	All devices have equal priority.</li>\r\n  <li>	In this process, only one device can send data at a time.</li>\r\n  <li>	Before a device sends data, it will first sense the wire to ensure that no other device is currently sending data. If another device is currently using the media, it will have to wait till that transmission is over. If no device is currently using wire it can send the data.</li>\r\n  <li>	If two or more devices simultaneously sense wire and see no data in it, they could place their data on the wire at the same time.</li>\r\n  <li>	In this situation, a collision will occur.</li>\r\n  <li>	When a collision occurs, a special jam signal is created in the wire.</li>\r\n  <li>	Jam signal has a waiting time.</li>\r\n  <li>	All devices have to wait till the jam signal time is over.</li>\r\n  <li>	Once this time is over, devices can sense the wire again.</li>\r\n  <li>  If a device\'s data is lost in the collision, the device sends the same piece of data again.</li>\r\n</ul>\r\n<h3>CSMA/CA</h3>\r\n<p>WLANs use a mechanism called Carrier Sense, <b>Multiple Access/Collision Avoidance (<i>CSMA/CA</i>)</b>.\r\nUnlike Ethernet, it is impossible to detect collisions in a wireless medium. In a WLAN, a device cannot simultaneously send or receive data.\r\n It can only do one or the other. Because of this, it cannot detect a collision.  To avoid collisions, a device will use <b>Ready-to-Send (<i>RTS</i>)</b> and\r\n  <b>Clear-to-Send (<i>CTS</i>)</b> signals. When a device is ready to transmit, it first senses the airwaves for a current signal.\r\n  If there is none, it generates an <b>RTS</b> signal, indicating that data is about to send. It then sends its data and finishes by sending\r\n   a <b>CTS</b> signal, indicating that another wireless device can now transmit.</p>\r\n<p>If you like this tutorial, please share it with friends via your favorite social networking sites and subscribe to our YouTube channel.</p>\r\n</div>\r\n                    </div>', 'This tutorial explains CSMA/CD and CSMA/CA in detail. Learn what CSMA/CD and CSMA/CA are, how they work, and why they are used in computer networks.', 0, '/uploads/img/1636992765.png', '2021-09-27 02:57:32', '2021-09-27 02:57:32'),
(7, 1, 'network', 'Ethernet 5-4-3 rule Explained', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains the 5-4-3 rule in networking.  Learn what the 5-4-3 rule is and in which Ethernet network architecture it is used.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<h3>What is the 5-4-3 rule in computer networking?</h3>\r\n<p>The 5-4-3 rule specifics that in a single collision domain there can be only five network segments in total, joined by four repeaters, but only three of those network segments can be populated with nodes.</p>\r\n<p>In a network, signals get a very limited time to propagate. Because of this, if more than four hubs exist between end devices, a collision on one end of the network might not be detected by devices on the other side of the network in time for them to react properly. The 5-4-3 rule ensures that all nodes on the network can detect a collision and take appropriate steps to remove it.</p>\r\n<h3>In which architecture the 5-4-3 rule is used?</h3>\r\n<p>The 5-4-3 rule applies to an architecture that designs the network in a single collision domain. A single collision domain means a group of devices that share collision. Coaxial cables, Hubs, and Repeaters share a collision. If you use these things to build a network, you create a single collision domain network. Three Ethernet specifications use these things. These specifications are 10Base2, 10Base5, and 10BaseT.</p>\r\n<p>Let\'s discuss how these specifications use the 5-4-3 rule.</p>\r\n<h3>10Base2</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>10Base2 is known as <b>ThinNet</b>. This specification uses RG-58 coaxial cables.  The maximum length of a ThinNet segment is 185 meters. You can create a maximum of 5 segments. The entire cabling scheme, including all five segments, can\'t be longer than 925 meters. You can populate 3 segments and can put a maximum of 30 devices on each populated segment.</p>\r\n<h3>10Base5</h3>\r\n<p>10Base5 is known as <b>ThickNet</b>. This specification uses RG-8 cables. The maximum network segment length is 500 meters. The entire set of five segments cannot exceed 2,500 meters. You can have a maximum of 100 devices on a 10Base5 network segment.</p>\r\n<h5>Key points</h5>\r\n<ul class=\"ul-arrow\">\r\n  <li>ThinNet and ThickNet network segments can be joined using repeaters to form larger networks.</li>\r\n  <li>If you want to join network segments, you have to follow the 5-4-3 rule.</li>\r\n  <li>If you violate the 5-4-3 rule when implementing a network, the network will not work properly.</li>\r\n  <li>The 5-4-3 rule states that the maximum number of segments you can join is five.</li>\r\n  <li>To join these segments, you can use four repeaters.</li>\r\n  <li>You can attach computers in three segments, leaving two segments. The remaining two segments are used only for extending distances rather than hosting computers.</li>\r\n  <li>These two unpopulated segments are called <em>inter-repeater</em> links.</li>\r\n  <li>You can join up to three segments of 500 or 185 meters.</li>\r\n  <li>You can use two repeaters to extend the network with another two cable segments of 500 or 185 meters each, as long as these were link segments connected directly to the next repeater in line, with no intervening computers.</li>\r\n  <li>A 10Base2 network can span up to 925 meters and a 10Base5 network can span up to 2,500 meters.</li>\r\n  <li>You could put a maximum of 30 devices in a 10Base2 segment and 100 devices in a 10Base5 segment.</li>\r\n</ul>\r\n\r\n<p>The following image shows the implementation of the 5-4-3 rule in 10Base2 and 10Base5 architectures.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt29-01-5-4-3-rule.png\" alt=\"5-4-3 rule\"></p>\r\n<h3>10BaseT</h3>\r\n<p>The 5-4-3 rule applies to this specification only if it uses hubs to connect devices.  If you want to use hubs to create a network, you should follow the 5-4-3 rule. The rule for expanding a 10BaseT network with hubs is that no more than four hubs can be placed between two communicating workstations.</p>\r\n<h5>Conclusion</h5>\r\n<p>The 5-4-3 rule applies to a network that uses the devices that share collision. Switches do not share a collision. A collision on a switch can take place only between the switch and a single workstation. Since modern networks use switches, the 5-4-3 rule does not apply to modern networks. 10Base2, 10Base5, and10BaseT are essentially obsolete technologies. To take full advantage of current technology, networks using these technologies should upgrade as soon as circumstances permit.</p>\r\n<p>If you like this tutorial, please share it with friends via your favorite social networking sites and subscribe to our YouTube channel.</p>\r\n</div>                    </div>', 'This tutorial explains the 5-4-3 rule in networking.  Learn what the 5-4-3 rule is and in which Ethernet network architecture it is used.', 0, '/uploads/img/1636992765.png', '2021-09-27 02:58:55', '2021-09-27 02:58:55'),
(8, 1, 'network', 'Simplex, Half-duplex, and, Full-duplex Explained', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains the difference between simplex, half-duplex, and full-duplex. Learn what the data transmission modes are and how they are used.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<h3>What is the data transmission mode?</h3>\r\n<p>A data transmission mode describes how two devices in a network communicate or exchange data. It specifics the direction in which signals travel over the media and the number of signals that can traverse the media at any given time.</p>\r\n<h2>Types of transmission mode</h2>\r\n<p>There are three types of transmission modes. These types are Simplex, Half-duplex, and Full-duplex. Let\'s discuss these methods in detail.</p>\r\n<h3>Simplex</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p><b>Simplex</b> is also called one-way or unidirectional. It allows communication in one direction only. Since signals travel in only one direction, the sender device uses the entire communication channel or all available bandwidth. The receiver device only receives signals. The receiver can\'t reply to the sender by using the same communication channel.  TV remotes, garage door openers, and smart speakers are some examples of Simplex.</p>\r\n<p>You can use the remote to control TV programs and functions, but you can\'t use the TV to control the remote in any way.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt27-01-simplex-duplex.png\" alt=\"simplex data transmission mode\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt27-01-simplex-duplex.png\"></p>\r\n<h3>Half-duplex</h3>\r\n<p><b>Half-duplex</b> allows communication in both directions but not at the same time. Signals travel in both directions over a medium but in one direction only at a time. Since signals travel in only one direction, a device can either send or receive data at a given time.  A network card set to Half-duplex cannot receive data when it is sending data. To receive data, it needs to change the direction of data flow. To change direction, a special signal is used and acknowledged. The time required to turn over control to the other side is called the <i>line turnaround time</i>.</p>\r\n<p>Railway tracks and walkie-talkies are examples of half-duplex. Only one train can run on a railway track at a time. If a train is on the track, the second train has to wait until the first train leaves the track.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt27-02-half-duplex.png\" alt=\"half-duplex data transmission mode\"></p>\r\n<h3>Full-duplex</h3>\r\n<p><b>Full-duplex</b> is also called two-way or bidirectional. It allows communication in both directions simultaneously. It divides the available channel into two parts and uses one part to send data and the other part to receive data. Since there is a separate path for sending and receiving data, a device can simultaneously perform both tasks at a given time.</p>\r\n<p>A two-lane highway is an example of a full-duplex. A two-lane highway uses dedicated lanes for incoming and outgoing traffic.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt27-03-full-duplex.png\" alt=\"full-duplex data transmission mode\"></p>\r\n<h3>Auto-sensing</h3>\r\n<p>A network interface card can operate in both half-duplex mode and full-duplex mode. All modern NICs run in full-duplex mode. Some older NICs only support half-duplex. Auto-sensing is a feature that allows a NIC to automatically detect whether the remote NIC supports full-duplex.</p>\r\n<h3>Differences between simplex, half-duplex, and full-duplex</h3>\r\n<div class=\"table-responsive\">\r\n<table class=\"table table-bordered table-hover\">\r\n<tbody><tr><td>Simplex</td><td>	Half-duplex	</td><td>Full-duplex</td></tr>\r\n<tr><td>It provides one-way communication. </td><td>	It provides two-way communication but one way at a time.  </td><td>	It provides two-way communication at the same time.</td></tr>\r\n<tr><td>A device can only send data, but it cannot receive data. </td><td>	A device can send and receive data but one at a time. </td><td>	A device can send and receive data at the same time.</td></tr>\r\n<tr><td>It utilizes less bandwidth than half-duplex and full-duplex. </td><td>	It utilizes more bandwidth than simplex but less than full-duplex.</td><td>	It utilizes more bandwidth than simplex and half-duplex.</td></tr>\r\n<tr><td>It uses one channel to transmit data. </td><td>	It also uses one channel to transmit data. </td><td>	It uses two separate channels to transmit data.</td></tr>\r\n<tr><td>Keyboards and scanners are examples of simplex. </td><td>	Hubs and old NICs are examples of half-duplex. </td><td>	Switches and modern NICs are examples of full-duplex.</td></tr>\r\n</tbody></table></div>\r\n<p>If you like this tutorial, please share it with friends via your favorite social networking sites and subscribe to our YouTube channel.</p>\r\n</div>                    </div>', 'This tutorial explains the difference between simplex, half-duplex, and full-duplex. Learn what the data transmission modes are and how they are used.', 0, '/uploads/img/1636992765.png', '2021-09-27 02:59:18', '2021-09-27 02:59:18'),
(9, 1, 'network', 'Differences between Physical and Logical topology', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial describes the main differences between Physical Topology and Logical Topology. Learn what physical topology and logical topology are and how they differ from each other.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Network topology defines how the network is structured and how the devices on the network communicate. It consists of two parts; physical and logical. The physical part describes the physical layout of the network while the logical part describes how data flows in the network. Both, physical and logical parts are also known as <b>physical topology</b> and <b>logical topology</b>.</p>\r\n<p class=\"text-primary\">Physical part (topology) + Logical part (topology) = Network topology</p>\r\n<p>The following image shows how physical topology and logical topology work in network topology.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt26-01-physical-layout-vs-logical-layout.png\" alt=\"network topology phyical topology logical topology\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt26-01-physical-layout-vs-logical-layout.png\"></p>\r\n<h3>Physical topologies</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Physical topology defines the physical layout of the network. It describes how the devices in the network are physically connected and what happens when a node on the network fails. It also specifics the arrangement of cabling and how cables connect one device to another in the network.</p>\r\n<p>The most common physical topologies are the following.</p>\r\n<p><b>Bus Topology: -</b><br> In this topology, devices connect in a line. Coaxial cables are used to connect devices in the sequence.</p>\r\n<p><b>Star Topology: -</b><br> In this topology, devices connect to a centralized device. A Hub or a switch is used as the centralized device.</p>\r\n<p><b>Hybrid Topology: -</b><br> When a bus topology is used to extend the star topology, it is known as hybrid topology.</p>\r\n<p><b>Mesh Topology: -</b><br> In this topology, devices directly connect. There are two types of mesh topology: partial mesh and full mesh. In partial mesh, only some devices have direct connections while in the full mesh all devices have direct connections.</p>\r\n<div class=\"art-part-block\">\r\n<p>To learn the above topologies in detail, you can check the following tutorial.</p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/networking-tutorials/network-topologies-explained-with-examples.html\" target=\"_blank\">Network Topologies Explained with Examples</a></p>\r\n<p>This tutorial describes physical topologies in detail along with their advantages and disadvantages.</p>\r\n</div>\r\n<h2>Logical topologies</h2>\r\n\r\n<p>Logical topology defines the logical layout of the network. It describes how the devices in the network communicate with each other and how data is transmitted. The three main logical topologies are bus topology, ring topology, and switched topology.  </p>\r\n<h4>Bus topology</h4>\r\n<p>Bus topology uses the one-to-all method. In this method, when a device transmits a message, the message reaches all the nodes of the same link. All nodes read the message and determine whether the message is intended for them. A node processes the message only if it is intended for it. A node uses the destination address of the message to determine whether the message is intended for it. Each message has a destination address. If the message is not intended for the node, the node discards the message.</p>\r\n<h4>Ring topology</h4>\r\n<p>Ring topology uses the one-to-one method. In this method, each node receives data only from one node and transmits data only to one node. Data is passed sequentially from node to node. A token mechanism is used to determine the node that can transmit data. Only one node can transmit data at a time. A node can transmit data only if it has the token. After transmitting data, the node passes the token to the next node. When a node receives data, it checks whether the data belongs to it. If the data is not intended for it, it passes the data to the next node.</p>\r\n<p>The following image shows how data is transmitted in both topologies.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt26-02-logical-bus-ring-topology.png\" alt=\"logical ring and bus topology\"></p>\r\n<h3>Switched logical topology</h3>\r\n<p>Switched topology creates end-to-end connections on demand. In this method, there is always an electrical connection between nodes and the switch. When the switch receives a data packet, it checks the source address and destination address of the packet and creates a logical connection between the sender node and the receiver node. When the transmission is over, the switch terminates the logical connection.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt26-03-switched-logical-topology.png\" alt=\"switched logical topology\"></p>\r\n<p>The following table describes how network topology uses logical topology and physical topology.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt26-04-network-topology-physical-toplogy-logical-topology.png\" alt=\"logical topology vs physical topology\"></p>\r\n<p>The following table describes how network topology uses logical topology and physical topology.</p>\r\n<div class=\"table-responsive\">\r\n<table class=\"table table-bordered table-hover\">\r\n<tbody><tr><td>Network Topology</td><td>	Physical Topology	</td><td>Logical topology	</td><td>Description</td></tr>\r\n<tr><td>Ethernet</td><td>	Bus or star</td><td>	Bus</td><td>	This is the classical implementation of Ethernet network topology. In this implementation, logical bus topology is implemented as a physical bus or star topology. When it is implemented as a physical star topology, a Hub is used in the center of the topology. Regardless, whether you use a physical star or bus topology, data transmitted from a node is received by all other nodes.</td></tr>\r\n<tr><td>Wireless LANs</td><td>	Star</td><td>	Bus</td><td>	In this implementation, devices connect through a central access point. Only one device can transmit data at a time and all devices listen to the transmission. Since data transmitted by one device is received by all other devices, a Wireless LAN is considered as a logical bus topology.</td></tr>\r\n<tr><td>Token Ring and FDDI</td><td>	Ring</td><td>	Ring</td><td>	This implementation uses an MAU (Multi-station access unit) to connect devices. MAU creates a logical ring, so data is passed from node to node in a pre-defined sequence until it reaches the destination device.</td></tr>\r\n<tr><td>Ethernet</td><td>	Switched</td><td>	Star</td><td>	This is the modern implementation of Ethernet network topology. This implementation uses a physical star topology running a switched logical topology. In this implementation, the switch dynamically creates logical circuits between two devices whenever they exchange data. Almost all modern networks use this implementation.</td></tr>\r\n</tbody></table></div>\r\n<h5>Conclusion</h5>\r\n<p>Network topology defines the layout of the network. It consists of physical topology and logical topology. Physical topology describes the physical layout of the network while logical topology defines data flows on the physical layout.</p>\r\n<p>If you like this tutorial, please share it with friends via your favorite social networking sites and subscribe to our YouTube channel.</p>\r\n</div>                    </div>', 'This tutorial describes the main differences between Physical Topology and Logical Topology. Learn what physical topology and logical topology are and how they differ from each other.', 0, '/uploads/img/1636992765.png', '2021-09-27 02:59:39', '2021-09-27 02:59:39'),
(10, 1, 'network', 'Client-Server Networks Model Explained', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains the client-server network model. Learn the advantages and disadvantages of the client-server network model and the differences between the client-server network model and the peer-to-peer network model.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Based on how shared resources are managed there are two types of networks: peer-to-peer and client-server. In the peer-to-peer network, shared resources are managed by the nodes that share them. I have already explained the peer-to-peer network model in the first part of this article. In this part, we will discuss the client-server network model.</p>\r\n<div class=\"art-part-block\">\r\n<p>This tutorial is the second part of the article <b>\"Network Architectures and models Explained\".</b> Another parts of this article are the following.</p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/networking-tutorials/peer-to-peer-networks-explained.html\" target=\"_blank\">Peer to Peer Networks Explained</a></p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/networking-tutorials/client-server-architecture-explained.html\" target=\"_blank\">Client Server Architecture Explained</a></p>\r\n</div>\r\n<h2>Client-server network model</h2>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>In the client-server network model, shared resources are managed through a centralized database. A centralized database stores all information about the network. Usually, this information includes user accounts, passwords, computer accounts, location of shared resources, access rules, and the hierarchy of the network. The system on which the centralized database is installed is known as the server system.</p>\r\n<p>The following image shows an example of a client-server network model.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt25-01-client-server-network-model.png\" alt=\"client-server networks model\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt25-01-client-server-network-model.png\"></p>\r\n<p>Depending on the size of the centralized database and hierarchy of the network, the database can be installed on a single server system or multiple server systems. A centralized database can only be installed on a NOS. A NOS (network operating system) is a type of operating system that is mainly designed for applications that are used to perform networking-related tasks. Microsoft Windows Server, Ubuntu Server, and RHEL Server are examples of NOS.</p>\r\n<p>Client systems are used to access shared resources. A client system provides two types of login access: local login and network login. The local login is used to access the resources available on the local system. The network login is used to access the shared resources available on the network.</p>\r\n<p>A client system stores login information of only local user accounts. When a user uses the local user account to log in, the client system authenticates the login. When the user uses the network user account to log in, the client system transfers the credential to the server system. The server system checks the centralized database and grants login access if the supplied username and password are correct.</p>\r\n<p>Since the login information of network user accounts is stored on the server system, a user can use any client system to log in and access his network user account.</p>\r\n<p>The following image shows an example of this process.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt25-02-local-user-vs-network-user.png\" alt=\"local user and network user\"></p>\r\n<p>Typically, a server is used for the following functions.</p>\r\n<ul class=\"ul-arrow\">\r\n  <li>	Storing and managing data in a centralized location</li>\r\n  <li>	Backing up data regularly</li>\r\n  <li>	Creating network users accounts</li>\r\n  <li>	Grouping user accounts based on multiple criteria and requirements</li>\r\n  <li>	Storing locations of shared resources</li>\r\n  <li>	Mapping user accounts with shared resources</li>\r\n  <li>	Creating access rules for shared resources</li>\r\n  <li>	Authenticating user login</li>\r\n  <li>	Restricting unauthorized access</li>\r\n  <li>	Controlling what a user can access</li>\r\n  <li>	Supplying network applications to client systems</li>\r\n  <li>	Defining client computers from where a user can log in</li>\r\n</ul>\r\n<p> To perform the above tasks, a server system requires more processing power, memory, and storage capacity than client systems. For example, a file server may use multiple hard disks to store a large amount of data.</p>\r\n<h4>Differences between the client-server network model and peer-to-peer network model</h4>\r\n\r\n<p>The peer-to-peer network model stores user accounts and passwords on the local system. The client-server network model stores user accounts and passwords on a centralized database that can be installed on a single system or a group of systems.</p>\r\n<p>If a device accesses a service and presents a platform to use the accessed service, the device is known as the client. If a device provides a service, the device is known as the server. In the peer-to-peer network model, a device can act as both. It can act as a server to provide a service and act as a client to access a service. In the client-server model, a device has a dedicated role. It can be either a server or a client. It cannot be both.</p>\r\n<p>In the peer-to-peer network model, each device has equal rights. A device cannot control another device in any form. In the client-server network model, the server defines the rights of each client.</p>\r\n<p>The peer-to-peer network model does not require a special operating system and applications. The client-server network model needs a special operating system known as NOS and network applications.</p>\r\n<p>The peer-to-peer network model is easy to set up and does not need an experienced administrator for management. The client-server network model is complex and needs an experienced administrator for management.</p>\r\n<p>The peer-to-peer network is less expensive than the client-server network model.</p>\r\n<p>The peer-to-peer network model provides basic sharing options. The client-server model provides all sharing options.</p>\r\n<p>The peer-to-peer network is mostly used in a home or small office network. The client-server model is mainly used in a business environment.</p>\r\n<h3>Advantages of the client-server network model</h3>\r\n<p>It stores all critical information in a single place which makes it easier to manage and backup.</p>\r\n<p>It allows an administrator to define access rules for each shared object.</p>\r\n<p>It allows an administrator to control the entire network from a single place.</p>\r\n<p>It is the most secure network model among all available network models.</p>\r\n<p>It is scalable. An administrator can easily add and remove clients from the network.</p>\r\n<p>In this model, troubleshooting is easy.</p>\r\n<h3>Disadvantages of the client-server network model</h3>\r\n<p>Since it stores all information in a single place, it has a single point of failure. If the server fails, the entire network fails.</p>\r\n<p>It requires a NOS and network applications that cost a lot of money.  You can easily purchase a top-end desktop computer for the price of a single NOS.</p>\r\n<p>It requires a dedicated and experienced administer for setup and management.</p>\r\n<p>It is not suitable for home and small offices.</p>\r\n<p>That\'s all for this tutorial. In the next part of this tutorial, we will discuss client-server networks architecture in detail. If you like this tutorial, please share it with friends through your favorite social networking site.</p>\r\n</div>                    </div>', 'This tutorial explains the client-server network model. Learn the advantages and disadvantages of the client-server network model and the differences between the client-server network model and the peer-to-peer network model.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:00:20', '2021-09-27 03:00:20'),
(11, 1, 'network', 'IPv6 Autoconfiguration Types and States Explained', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains the IPv6 stateless address autoconfiguration process in detail. Learn what the autoconfiguration process is, how it works, and what the autoconfiguration states are.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Every node in the network requires a unique IP address to communicate and exchange data with other notes. There are multiple ways to configure IP addresses on nodes. One such way is the address autoconfiguration. The address autoconfiguration is a feature of IPv6. It allows nodes to automatically configure IPv6 addresses for them.</p>\r\n<p>The IPv6 address consists of 128 binary bits. These bits are divided into two equal portions. The first 64 bits are known as the <b>network ID</b> (<em>network address</em>) and the last 64 bits are known as the <b>interface ID</b> (<em>host address</em>).\r\n An interface ID identifies the interface in the subnet. A network ID identifies a group of interfaces in the network.</p>\r\n<p>The address autoconfiguration process automatically creates the network ID and interface ID of the address based on several factors. Let\'s discuss these factors and how the autoconfiguration process works in detail.</p>\r\n<h2>Autoconfiguration process</h2>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>When we start an IPv6 interface, the interface checks whether a valid IP configuration exists. If a valid IP configuration does not exist, the interface automatically initiates the address autoconfiguration process.</p>\r\n<p>In the first step, the autoconfiguration process creates a <b>link-local address</b>. A link-local address allows the interface to communicate with other interfaces on the same link. To create a link-local address, the interface uses the following procedure.</p>\r\n<p>To create the network ID, the first 10 bits are set to <b>1111 1110 10</b> and the remaining 54 bits are set to <b>0</b>.\r\nIn hexadecimal notation, the binary number <b>1111111010</b> is written as the <b>FE80</b>. In IPv6, a continuous set of <b>0</b> can be\r\nabbreviated as double colons (<b>::</b>). Because of these two rules, the network ID of the link-local address always remains as <b>FE80::/64</b>.</p>\r\n<p>To create the interface ID, the interface uses the <b>EUI-64</b> algorithm. This algorithm uses the hardware address (MAC) of the interface.\r\n The hardware address consists of <b>48</b> bits.  The first 24 bits identify the company while the last 24 bits identify the interface.\r\n The <b>EUI-64</b> algorithm inserts the hexadecimal value <b>FFFE</b> (<em>16 bits in binary</em>) between the company identifier and the interface identifier.\r\n It also sets the 7<sup>th</sup> bit of the MAC address to <b>1</b> which indicates that the address is locally defined.</p>\r\n<p>Let\'s take an example. Suppose the MAC address of an interface is <b>AC:62:E8:49:5F:62</b>.\r\nThen the link-local address created by the autoconfiguration process will be <b>FE80::AE62:E8FF:FE49:5F62</b>.\r\nIn this address, <b>FE80::</b> is the <b>network ID</b> (address) and <b>AE62:E8FF:FE49:5F62</b> is the <b>interface ID</b> (address).</p>\r\n<p>The following image shows how the interface ID is calculated in this address.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/ip-tutorials/it11-01-genrating-interface-id.png\" alt=\"calculating interface id autoconfiguration process\"></p>\r\n<p>No two interfaces can use the same address. Before assigning the created address to the interface,\r\nthe autoconfiguration process verifies that the created address is unique. An address that uniqueness is not verified is known as a <b>tentative address</b>.</p>\r\n<p>To verify the uniqueness of the address, the autoconfiguration process starts the second phase.</p>\r\n<p>In the second phase, the host sends a <b>Neighbor Solicitation</b> message to the address created in the first phase.\r\nIf the created address is already used, the interface that is using the address replies with a <b>Neighbor Advertisement</b> message.</p>\r\n<div class=\"art-part-block\">\r\n<p>To learn IPv6 message types and their meaning in detail, you can the following tutorial.</p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/ip-tutorials/ipv6-neighbor-discovery-protocol-explained.html\" target=\"_blank\"> IPv6 Neighbor Discovery Protocol Explained</a></p>\r\n</div>\r\n<p>If the host receives a <b>Neighbor Advertisement</b> message in the response to the sent <b>Neighbor Solicitation</b> message,\r\nit indicates that the address is already used. If the host does not receive any response to the sent <b>Neighbor Solicitation</b> message,\r\nit indicates that the address is not used.</p>\r\n<p>If the created address is already used, the host stops the autoconfiguration process.\r\nAt this point, manual configuration needs to be performed on the node. If the created address is not used,\r\nthe host assigns the address to the interface. At this point, the interface can communicate with other interfaces on the same link.</p>\r\n<p>After assigning the link-local address, the host starts the third phase of the autoconfiguration to\r\nacquire the site-local and global addresses. Before we learn the third phase of autoconfiguration, let briefly discuss\r\n two related terms. These terms are <b>stateful autoconfiguration</b> and <b>stateless autoconfiguration</b>.</p>\r\n\r\n<p>In <b>stateful autoconfiguration</b>, a node receives an IP configuration or some part of the IP configuration from a DHCP server.\r\nIn the <b>stateless autoconfiguration</b>, a node automatically configures its IP configuration either based on several factors or based on\r\n the information received from an IPv6 router.</p>\r\n<p>A link-local address configured by the autoconfiguration process is an example of a stateless configuration.\r\nA site-local and global address can be configured from both methods. To configure these addresses through the stateful method, configure a DCHP server to provide IP configuration and configure nodes to obtain IP configuration from the DHCP server.</p>\r\n<p><em>In this tutorial, we will discuss only the stateless configuration. We will discuss stateful configuration separately in the next tutorial.</em></p>\r\n<p>In the third phase of the autoconfiguration process, the host sends router solicitation messages. If routers present on the link, they reply with router advertisement messages. A router advertisement specifies how the third phase of autoconfiguration should be performed.</p>\r\n<p>Router advertisements contain information about the prefix and options. The most common options are the hop limit, reachable time, retransmission timer, and maximum transmission unit. If the options are set in the advertisement, the host configures the corresponding parameters accordingly.</p>\r\n<p>The following image shows the steps of the autoconfiguration process that have been explained so far.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/ip-tutorials/it11-03-autoconfiguration-process-step-by-step.png\" alt=\"autoconfiguration creating site-local and global address\"></p>\r\n<p>The prefix information is used to generate site-local and global addresses.\r\nThe advertisement may contain zero, one, or more prefix information. For each prefix information, the host takes the following action.</p>\r\n<p>It checks the <b>autonomous address-configuration</b> flag. If the value of this flag is set to <b>1</b>, the host can use the information\r\navailable in the advertisement to generate addresses by using the stateless configuration method.</p>\r\n<p>If the <b>autonomous address-configuration</b> flag is set <b>1</b>, the host checks another options in the prefix.\r\nThese options are the <b>subnet prefix</b> and the <b>lifetime values</b> of the subnet prefix. The lifetime values indicate how long addresses that are generated from the subnet prefix remain valid.</p>\r\n<p>The subnet prefix is used to generate site-local and global addresses. The process of generating the new address is the same.\r\n To generate the network ID, the subnet prefix is used. To generate the interface ID, the hardware address of an appropriate interface\r\n and EUI-64 algorithm is used.</p>\r\n<p>Once the address is created, to verify the uniqueness of the address, the host uses the same steps that it uses to verify the uniqueness\r\n of the link-local address. The following image shows how the prefix information is used to create the site-local and global addresses.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/ip-tutorials/it11-02-autoconfiguration-using-prefix-information.png\" alt=\"autoconfiguration process explained\"></p>\r\n<h2>Address autoconfiguration states</h2>\r\n<p>An address created through the address autoconfiguration process goes through the five states. The following image shows these states.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/ip-tutorials/it11-04-autoconfiguration-states-and-time.png\" alt=\"address autoconfiguration timer\"></p>\r\n<h3>Tentative</h3>\r\n<p>Any address created through the autoconfiguration process remains in the tentative state until the uniqueness\r\n of the address is verified. In the tentative state, a node can\'t use the address to receive unicast traffic. However,\r\n it can use the address to receive and process Neighbor Advertisement messages received in response to the Neighbor Solicitation messages.</p>\r\n<h3>Preferred</h3>\r\n<p>Once the uniqueness of the address is verified, the address enters the preferred state. In the preferred state,\r\n the address can be used for unlimited communications. A node uses the preferred address to send and receive unicast traffic.\r\n The preferred lifetime field in the prefix information option of a router advertisement message defines the period of time that an address can remain in the tentative and preferred state.</p>\r\n<h3>Deprecated</h3>\r\n<p>From the preferred state, the address enters the deprecated state. In this state, the node can use the address for existing communication sessions but it can\'t use the address to start the new communication.</p>\r\n<h3>Valid</h3>\r\n<p>The valid state represents how long an address can be used for unicast communication. Since an address can be used for unicast communication in both the preferred and deprecated state, the valid state includes both states. The Valid lifetime field in the prefix information option of a router advertisement message defines the sum of the times that an address can remain in the tentative, preferred, and deprecated states.</p>\r\n<h3>Invalid</h3>\r\n<p>From the preferred state, the address enters in the invalid state. In this state, the address can no longer be used to send and receive unicast traffic. An invalid address indicates that the valid lifetime of the address has expired.</p>\r\n<p>If you like this tutorial, please share it with friends via your favorite social networking sites and subscribe to our YouTube channel.</p>\r\n</div>                    </div>', 'This tutorial explains the IPv6 stateless address autoconfiguration process in detail. Learn what the autoconfiguration process is, how it works, and what the autoconfiguration states are.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:00:39', '2021-09-27 03:00:39');
INSERT INTO `posts` (`id`, `user_id`, `type`, `title`, `content`, `mini_text`, `view`, `thumbnail_img_url`, `created_at`, `updated_at`) VALUES
(12, 1, 'linux', 'Tar command Compress and Extract Archives', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>The tutorial explains how to use the tar command to compress and extract files in Linux. Learn how to preserve the SELinux context while creating a tar archive file.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>The <b>tar</b> command is one of the most commonly used commands for creating archives. Archives allow us to manage several files and directories as a single file. Archives are usually created for backup or transferring files.</p>\r\n<p>To save disk space (if the archive is being created for backup) or to save network bandwidth (if the archive is being created to transfer files), usually files are compressed before they are added to the archive.</p>\r\n<p>The <b>tar</b> command does not have any inbuilt functionality to compress files when adding them to the archive. But if required, it can use third-party compression utilities such as the <b>gzip</b> and <b>bzip2</b> to compress files before adding them to the archive.</p>\r\n<p>The <b>gzip</b> utility compresses faster but provides a low compression ratio. The <b>bzip2</b> command compresses slower but provides a high compression ratio. In the following section, we will understand how to use both utilities with the <b>tar</b> command.</p>\r\n<div class=\"art-part-block\">\r\n<p>This tutorial is the third and last part of the article <b>\"How to use Tar Command in Linux Explained with examples\"</b>. The previous parts of this article are the following.</p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/linux-tutorials/tar-command-options-and-syntax-explained.html\" target=\"_blank\">Tar command options and syntax explained</a></p>\r\n<p><em class=\"small\">This is the first part of this article. It explains how to use the tar command to create an archive.</em></p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/linux-tutorials/tar-command-examples-in-linux.html\" target=\"_blank\">Tar command examples in Linux </a></p>\r\n<p><em class=\"small\">This is the second part of this article. It explains how to manage an archive after creation.</em></p>\r\n</div>\r\n<h3>Using gzip and bzip2 to compress tar archives</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>To instruct the <b>tar</b> command to use the gzip utility to compress files before adding them to the archive, use the option <b>g</b> with the options <b>cvf</b>. To indicate that the <b>gzip</b> compression is used, use the extension <b>.gz</b> with the archive file name.</p>\r\n<p>To create and compress the archive file with the <b>bzip2</b> utility, use the option <b>j</b> with options <b>cvf</b> and use the file extension <b>.bz2</b> with the archive file name.</p>\r\n<p>For example, the following commands create the archive <b>home.tar</b> from the <b>/home</b> directory without compression, with the <b>gzip</b> compression, and with the <b>bzip2</b> compression.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -cvf /tmp/home.tar /home\r\n#tar -czvf /tmp/home.tar.gz /home\r\n#tar -cjvf /tmp/home.tar.bz2 /home\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>Once compression is done, to view the size of the compressed archive file, use the <b>du</b> command with the option <b>h</b>.</p>\r\n<p>The following image shows the above commands with output.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt37-01-compression-comprare.png\" alt=\"create a tar archvie for practice\"></p>\r\n<p>Once an archived file is compressed, advance operations such as append, update, and individual delete can\'t be performed on the archived file. If you perform these advanced operations on a compressed archived file, the tar command will show the following error.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">Tar: Error is recoverable: exiting now\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows what will happen if we perform the following tasks on a compressed archive file: Append, update, and individual delete.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt37-02-advance-operation-fail.png\" alt=\"tar command error Tar: Error is recoverable: exiting now\"></p>\r\n<h3>Extracting a compressed archive file</h3>\r\n\r\n<p>To extract an archived file, the options <b>xvf</b> are used with the <b>tar</b> command. If the archive file is compressed by using the <b>gzip</b> utility, specify the option <b>g</b> along with these options. If the archive file is compressed by using the <b>bzip2</b> utility, specify the option <b>j</b> along with these options.</p>\r\n<p>Alternatively, you can omit the compression related option (g and j). If the compression related option is not specified and the archived file is compressed, the tar command automatically detects compression and use the correct compression utility to decompress the compressed archived file.</p>\r\n<p>For example, to extract the compressed archive <b>data.tar.gz</b>, you can use any one command from the following commands.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -xvf data.tar.gz\r\n#tar -xzvf data.tar.gz\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>If you are not sure which compression utility was used to compress the archive file, don\'t specify the compression related option. If the compression related option is specified, the tar command uses the utility that is associated with the specified option. And if that utility is incorrect, the archived file will not be decompressed.</p>\r\n<p>For example, the following command will fail, as it instructs <b>tar</b> to use the <b>bzip2</b> utility to decompress the archived file that was compressed with the <b>gzip</b> utility.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -xjvf data.tar.gz\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image a few more examples of how to use the correct options to decompress and extract compressed archived files.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt37-03-extract-compressed-tar.png\" alt=\"extracting an compressed archive\"></p>\r\n<h5>Preserving SELinux context when adding files to the archive</h5>\r\n<p>File attributes are used to store additional information about the file. There are two types of attributes; regular attributes and extended attributes. <b>Regular attributes</b> contain essential information such as owner info, access permission, created date, etc. <b>Extended attributes</b> contain the metadata information such as access control list, SELinux, etc.</p>\r\n<p>By default, the tar command doesn\'t retrain the extended attributes. If we want to preserve the extended attributes, we have to instruct the <b>tar</b> command to do the same. For example, if you want to preserve the SELinux contexts, use the option <b>--selinux</b>.</p>\r\n<p>Let\'s take an example, to understand how it works practically.</p>\r\n<ul class=\"ul-arrow\">\r\n  <li>	Create two directories for the practice: <b>reg</b> and <b>ext</b>.</li>\r\n  <li>	Switch to the directory <b>/var/www/html</b> and create a few files.</li>\r\n  <li>	Create two archive files by using the files which are created in the above step. When creating the second archive file, specify the option <b>--selinux</b> before specifying the options <b>-cvf</b>.</li>\r\n  <li>	Copy both archive files into the directories (reg and ext) that we created in the first step, respectively.</li>\r\n  <li>	Switch to both directories one-by-one and extract the copied archive files.</li>\r\n  <li>	When extracting the archived file that was created with the option <b>--selinux</b>, specify the same option <b>--selinux</b> before specifying the options <b>-xvf</b>.</li>\r\n</ul>\r\n<p>The following image shows the above exercise step by step along with the required commands and their output.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt37-04-tar-command-selinux-example.png\" alt=\"extract archive preserve SELinux\"></p>\r\n<p>Now compare the SELinux contexts of the extracted files with the SELinux contexts of the original files.</p>\r\n<p>The following image shows the SELinux context of the original files, extracted files without <b>--selinux</b> option, and extracted files with the <b>--selinux</b> option.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt37-05-tar-preserve-selinux-context.png\" alt=\"preserve SELinux context tar archive\"></p>\r\n<p>As you can see in the above image, if the option <b>--selinux</b> is used when creating and extracting an archive file, the SELinux contexts of the files are preserved.</p>\r\n<p>That\'s all for this article. If you have any suggestions, feedback, or comment about this article, let me know. If you like this article, please don\'t forget to share it with friends through your favorite social network.</p>\r\n</div>                    </div>', 'The tutorial explains how to use the tar command to compress and extract files in Linux. Learn how to preserve the SELinux context while creating a tar archive file.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:03:39', '2021-09-27 03:03:39'),
(13, 1, 'linux', 'Pipes in Linux Explained', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains what pipes are in Linux and how to use them. Learn how pipes work in Linux through examples.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<h3>What are the pipes in Linux?</h3>\r\n<p>Pipes are syntactical glue that allows the <b>STDOUT</b> (standard output) from one command to be work as <b>STDIN</b> (standard input) of the next command.\r\nIn simple words, pipes connect two or more commands, scripts, utilities, or programs together.\r\nPipes are represented by the vertical bar <b>(|)</b>.</p>\r\n<h3>How do pipes work in Linux?</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Normally, commands, scripts, utilities, programs, and processes work in three stages. These stages are taking an input, processing the input, and returning\r\n the output (processed input). A <b>pipe</b> connects the third stage of a command to the first stage of the next command.</p>\r\n<p>Let\'s understand this process through an example. Suppose, you want to process some data through three commands in such a way that\r\nthe output of the first command works as the input of the second command and the output of the second command works as the input of the third command.</p>\r\n<p>In such a situation, the output of the first command would have to be saved in a temporary file. The second command would have to\r\n read the input data from the intermediate temporary file and perform its modification or operation on the data and would have\r\n  to save its output in its own temporary data file. The third command would have to take its input data from the second temporary\r\n  data file and perform its own manipulation and then send the resulting output data to the specified output device. At each step, you have to save the output in a temporary file and have to specify that temporary file as an input file for the next command.</p>\r\n<p>The following image shows the above example.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl10-01-commands-without-pipes.PNG\" alt=\"commands redirection without pipes\" src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl10-01-commands-without-pipes.PNG\"></p>\r\n<p>Pipes make this process easier. Pipes connect the output from one command to the input of another command.\r\nIn other words, instead of sending the output of a command to a destination file or device, pipes send that output to another command as input.\r\n This lets you have one command work on some data and then have the next command deal with the results.</p>\r\n<p>The following image shows how pipes work in the above example.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl10-02-commands-with-pipes.PNG\" alt=\"redirecting commands with pipes\"></p>\r\n<h3>Examples of pipes</h3>\r\n<p>Let\'s take some examples to understand how pipes are used. Suppose, we want to alphabetically sort all contents of the current directory.\r\nThe <b>ls</b> command lists all contents of the specified directory. The <b>sort</b> command sorts the contents of the specified directory.</p>\r\n<p>We can use both commands separately or can use them together by using a pipe sign. To use both commands separately, first, execute the\r\n <b>ls</b> command and save its output in a temporary file and then execute the <b>sort</b> command.\r\n Specify the temporary file as the input file of the <b>sort</b> command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$ls &gt; tempfile\r\n$sort tempfile\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the above commands with the output.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl10-03-ls-sort-commands-without-pipes.png\" alt=\"commands without pipes\"></p>\r\n<p>Now let\'s do the same task by using pipes. Using pipes are extremely simple.\r\nJust use the pipe sign <b>(|)</b> between two commands that you want to connect in such a way that the output\r\n of the first command works as the input of the second command.</p>\r\n<p>In our example, we want to use the output of the <b>ls</b> command as the input of the <b>sort</b> command.\r\n To do this, place a pipe sign (vertical bar character) between both commands to form a connection between them.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$ls | sort\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The pipe operator receives output from the <b>ls</b> command placed before the pipe and sends this data as input to the <b>sort</b> command placed\r\nafter the pipe. The following image shows the output of the above command.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl10-04-using-pipe-to-connect-two-commands.png\" alt=\"using commands to connect pipes\"></p>\r\n<p>Let\'s take the next example. Suppose you want to count the number of files in a directory.\r\nFor this, you can send the output of the <b>ls</b> command in the <b>wc -l</b> command as the input.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$ls | wc -l\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the output of the above command.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl10-05-counting-files.png\" alt=\"counting files of a directory using pipes\"></p>\r\n<h3>Pipeline</h3>\r\n\r\n<p>Pipes are not limited to two commands. You can add as many commands as you want in a pipeline.\r\n A pipeline is a group of commands that connect in a chain by using pipes and provide a single output.</p>\r\n<p>When building a complex pipeline, it is best practice to write or add one command at a time to the pipeline and\r\ncheck its output before adding the next command to the pipeline. This approach helps you to debug the pipeline in case of an error.</p>\r\n<p>Let\'s understand how it works through an example. The following pipeline displays an alphabetically sorted list\r\n of users whose username starts with the word <b>\'user\'</b> and their default shell is set to <i>/bin /bash</i>.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$cat /etc/passwd | grep user |grep /bin/bash | sort\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>To build this pipeline, we will add command in the following manner.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$cat /etc/passwd\r\n$cat /etc/passwd | grep user\r\n$cat /etc/passwd | grep user | /bin/bash\r\n$cat /etc/passwd | grep user |grep /bin/bash | sort\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The <i>/etc/passwd</i> file stores local users\' database. We used the <b>cat</b> command to read/copy all data of this file and,\r\ninstead of displaying/pasting that data on the monitor screen, we instructed the <b>cat</b> command to redirect that data to the <b>grep</b> command as the input.</p>\r\n<p>We used the <b>grep</b> command to search all entries/lines that contain the word <b>\'user\'</b> in the output of the first command.\r\nAgain, instead of displaying the output on the screen, we redirected the output to the next <b>grep</b> command.</p>\r\n<p>We used the next <b>grep</b> command to search all lines that contain the <i>/bin/bash</i> in the output of the second command. Finally,\r\n we redirected to the filtered output to the <b>sort</b> command. The <b>sort</b> command sorts the input data alphabetically and displays that on\r\n the monitor screen.</p>\r\n<p>The following image shows the output of the above exercise.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl10-06-searching-user.png\" alt=\"example of pipeline\"></p>\r\n<p>That\'s all for this tutorial. If you like this tutorial, please don’t forget to share it with friends through your favorite social network.</p>\r\n</div>                    </div>', 'This tutorial explains what pipes are in Linux and how to use them. Learn how pipes work in Linux through examples.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:07:09', '2021-09-27 03:07:09'),
(14, 1, 'linux', 'Tar command examples in Linux', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial presents the most useful examples of the tar command. Learn how to create, list, update, and manage an archived file in Linux.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Suppose, you want to move several thousand files and directories from your computer to a remote computer. If you have to transfer all these files separately, then it would be a difficult task. But if all these files and directories are packed into a single archived file and you only have to move that file, then it would be an easier task.</p>\r\n<p>The tar command creates a single archived file from several files or directories. A single archived file is much easier to manage than managing a lot of files, especially when moving files from one location to another or backing up files.</p>\r\n<p>In this tutorial, we will understand how to use the tar command to create and manage an archived file.</p>\r\n<h5>Lab setup for the practice</h5>\r\n<p>Access the shell prompt and create a directory. In this directory, create some dummy files and subdirectories. You can also create some files in subdirectories.</p>\r\n<p>The following image shows how to set up this lab.</p>\r\n<p> <img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-01-practice-setup.png\" alt=\"lab setup for tar command practice\" src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-01-practice-setup.png\"></p>\r\n<h3>Creating and listing archived file</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>The following command creates an archived file from multiple files and directories.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -cvf [archived file name] [source files or directories name]\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>For example, to create an archived file <b>data.tar</b> from the files: <b>a</b> and <b>b</b>, use the following command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -cvf data.tar a b\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>Once an archived file is created, you can the following command to list its contents.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -tvf [archived file name]\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>For example, to list the contents of the archived file <b>data.tar</b>, use the following command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -tvf data.tar\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the above command with the output.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-02-tar-with-multiple-files.png\" alt=\"tar command adding files to tar\"></p>\r\n<p>I have already explained how to use the options <b>c, v, f, t,</b> and <b>x</b> in the previous part of this tutorial. These options are required to create and list an archived file. In this part, instead of repeating the same options, I will explain the options that are required to manage an archived file.</p>\r\n\r\n<div class=\"art-part-block\">\r\n<p>This tutorial is the second part of the article <b>\"How to use Tar Command in Linux Explained with examples\"</b>. The other parts of this article are the following.</p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/linux-tutorials/tar-command-options-and-syntax-explained.html\" target=\"_blank\">Tar command options and syntax explained</a></p>\r\n<p><em class=\"small\">This is the first part of this article. It explains how to use the tar command to create an archive.</em></p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/linux-tutorials/tar-command-compress-and-extract-archives.html\" target=\"_blank\">Tar command Compress and Extract Archives</a></p>\r\n<p><em class=\"small\">This is the third and last part of this article. It explains how to compress and extract a compressed archive in detail.</em></p>\r\n</div>\r\n\r\n\r\n<h3>Adding new file in exiting archive file</h3>\r\n\r\n<p>To add an additional file to an existing archive, use the options <b>-rvf</b> and specify the name of the new file as an argument.</p>\r\n<p>For example, the following command adds the file <b>c</b> to the archive <b>data.tar</b>.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -rvf data.tar c\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The tar command adds the specified file to the end of the archive.</p>\r\n<p>The following image shows the above commands with the output.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-03-adding-new-file-in-existing-archive.png\" alt=\"adding files to an existing archive\"></p>\r\n<h3>Removing or deleting files from an archive</h3>\r\n<p>To delete a file from the archive, use the option <b>--delete</b>.</p>\r\n<p>For example, to delete a file named <b>b</b> from the archive <b>data.tar</b>, use the following command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar --delete b -vf data.tar\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the output of the above command.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-04-delete-file-from-archive.png\" alt=\"deleting a file from an archive\"></p>\r\n<h3>Updating files of an existing archive</h3>\r\n<p>To add only those files that have been modified or created since the creation of the archive, use the option <b>u</b>.</p>\r\n<p>This option compares the supplied files and directories (as arguments) with the files and directories stored in the supplied archive. If it detects any changes to any file or finds a new file or directory, it adds that file or directory to the end of the archive.</p>\r\n<p>Since this option, instead of replacing the current version of the file, adds the updated version of the file as a separate file at the end of the archive, the original version of the file also remains in the archive.</p>\r\n<p>This feature allows us to store multiple copies of the same file, where the first copy contains the original data and all subsequent incremental copies contain the original data and the data that was added after the last incremental copy was made.</p>\r\n<p>To see how many incremental copies of a file are stored in the archive, we can use the option <b>t</b>. The option <b>t</b> lists the names of files and directories stored in the archive. If a file is listed two or more times, it simply means that the file has been changed since the archive was created.</p>\r\n<p>When extracting archives, the tar extracts files and directories in the same order in which they were added to the archive. This means, the original copy will be extracted first and incremental copies will be extracted later in their respective sequence.</p>\r\n<p>By default, the tar uses overwrite mode to extract archives. In this mode, if incremental copies of a file are available, the tar first extracts the original copy and then all the incremental copies in their respective order. In this way, the original file will be overwritten by the last available incremental copy of the file.</p>\r\n<p>To understand this process, let\'s take an example.</p>\r\n<p>Add a directory (which includes sub-directories and files) to an archive. Once the archive is created, run the update process immediately.</p>\r\n<p>Since nothing has changed since the creation of the archive, the update process does not add anything to the archive.</p>\r\n<p>Now change a file and run the update process again. This time, since a file has changed, the update process adds the modified file at the end of the archive.</p>\r\n<p>To verify that the update file has been added to the end of the archive, list the contents of the archive using the options <b>-tvf</b>.</p>\r\n<p>To understand how the tar extracts an archive that contains incremental copies, remove the original directory.</p>\r\n<p>Now extract the archive and list the directory that contains the modified file. It should only contain the updated version of the file.</p>\r\n<p>The following image shows this exercise step-by-step with the output.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-05-updating-archive.png\" alt=\"updating an archive\"></p>\r\n<h3>Listing the contents of a tarball or an archive file</h3>\r\n<p>To list the contents of an archive, you can use the options <b>-tvf</b>. For example, to see what files and directories are stored in the archive <b>data.tar</b>, you can use the following command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -tvf data.tar\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows some more examples that list the contents of the archives.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-06-listing-file-name-from-archive.png\" alt=\"listing an archive\"></p>\r\n<h3>Extracting files and directories from a tarball or an archive file</h3>\r\n<p>To extract an archive or a tarball file, the option <b>x</b> is used with the options <b>v</b> and <b>f</b>.\r\nFor example, the following command extracts an archive file <b>test.tar</b>.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -xvf test.tar\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>As mentioned earlier, when extracting an archive, the tar command uses the overwrite mode. It means, if the destination directory already contains a file of the same name, the tar command will overwrite the existing file if it finds a file of the same name in the archive.</p>\r\n<p>Let\'s understand it with an example.</p>\r\n<p>You added a file to an archive on Sunday. On Monday, you made some changes to the original file. On Tuesday, you extract the archive created on Sunday in the same directory.</p>\r\n<p class=\"text-primary\">What will happen in this case?</p>\r\n<p>In this case, all changes which were made on Monday will be lost as the updated file will be overwritten with the file which was backed up on Sunday.</p>\r\n<p>The following image shows this exercise step-by-step with the output.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-07-extraction-process.png\" alt=\"extracting archive\"></p>\r\n<p>When extracting the archive, the tar command uses the same directory structure in which the file and directory were added to the archive. It first creates the directory and then extracts the files in the respective directories.</p>\r\n<p>The following image shows this behavior of the tar command through an example.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-08-extract-directory.png\" alt=\"extracting a tar archive file\"></p>\r\n<p>When extracting an archive, by default, the tar command uses the current directory as the destination directory. It creates the same directory structure in the current directory and extracts files in that structure.</p>\r\n<p> The following image explains this behavior of the tar command through an example.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-9-directory-location.png\" alt=\"tar command extract to another directory\"></p>\r\n<p>To extract an archive in a specific directory, we have two options.</p>\r\n<ol>\r\n  <li>	Switch to the directory before executing the tar command.</li>\r\n  <li>	Specify the directory path with the option <b>-C</b></li>\r\n</ol>\r\n<p>The following image shows how to use both options with examples.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt36-10-tar-extract-in-specify-directory.png\" alt=\"extracting file to another directory\"></p>\r\n<p>That\'s all for this tutorial. In the next and last part of this tutorial, we will understand how to preserve SELinux contexts when extracting an archive. If you like this tutorial, please don\'t forget to share it with friends through your favorite social channel.</p>\r\n</div>                    </div>', 'This tutorial presents the most useful examples of the tar command. Learn how to create, list, update, and manage an archived file in Linux.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:07:30', '2021-09-27 03:07:30'),
(15, 1, 'linux', 'Input Output Redirection in Linux', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains the input/output redirection in Linux. Learn what the I/O redirection is and how it works in Linux through examples.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>When we open a file, start a program or process or command Linux automatically assigns three communication channels to it.\r\nThese channels are <b>STDIN</b>, <b>STDOUT</b>, and <b>STDERR</b>. These channels allow the opened file or the started program or process or command to\r\n interact with other files, programs, processes, or devices of the Linux system.</p>\r\n<p><b>STDIN</b> allows the opened file or process to receive data from other files, processes, and devices while <b>STDOUT</b> and <b>STDERR</b> allow it to send the\r\nprocessed data and errors to other files, processes, and devices, respectively.</p>\r\n<p>The keyboard is the default <b>STDIN</b> device. The monitor is the default <b>STDOUT</b> and <b>STDERR</b> device.\r\nThis means that by default STDIN reads from the keyboard and both STDOUT and STDERR write their output to the monitor screen.</p>\r\n<p>Instead of using default devices, if a process or a file wants to use other files or processes to read the input data or to send the processed output data,\r\n it can use I/O redirection. I/O redirection is a shell feature that allows an opened file or process to override default devices when using the communication channels.</p>\r\n<p>In the following section, we will understand how I/O redirection works through examples.</p>\r\n<p>STDIN, STDOUT, and STDERR are data streams. Linux uses these streams to transfer data between its components, processes, and devices. To learn the basic\r\n concepts of these streams, you can check the following tutorial.</p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/basic-linux/stdin-stdout-stderr-in-linux.html\" target=\"_blank\">STDIN STDOUT STDERR in Linux </a></p>\r\n<h3>I/O (Input / Output) Redirection</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>For I/O redirection, the shell assigns three symbols <b>&lt;,&gt;</b> and <b>&gt;&gt;</b>.  The <b>&lt;</b> symbol is used to override the\r\n STDIN while the <b>&gt;</b> and <b>&gt;&gt;</b> symbols are used to override the STDOUT and STDERR. If the <b>&gt;</b> symbol is used, the shell sends the output\r\n in the overwrite mode while if the <b>&gt;&gt;</b> symbol is used, the shell sends the output in the append mode.</p>\r\n<p>Let\'s take some examples to understand how I / O redirection works.</p>\r\n<p>Access the shell prompt and run the <b>cat</b> command without specifying any file name.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$cat\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The <b>cat</b> command copies input data from the specified file and pastes that data on the default <b>STDOUT</b> device. In simple words, it\r\n reads the specified file and displays the contents of the specified\r\nfile on the monitor (default STDOUT device).</p>\r\n<p>If an input file is not specified, it reads or copies data from the default <b>STDIN</b> device and displays or pastes that data on\r\n the default <b>STDOUT</b> device. Since we didn\'t specify any filename, the <b>cat</b> command reads input data from the keyboard (default STDIN device)\r\n  and displays that data on the monitor screen (default STDOUT device).</p>\r\n<p>To see how this works, type anything and press the <b>Enter</b> key at the end of each line. The <b>cat</b> command reads whatever you typed in\r\n the line and displays that as it is on the monitor.  To terminate the <b>cat</b> command and return to the shell prompt, press <b>CTRL+D</b> key.</p>\r\n<p>The following image shows the above exercise with the output.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-09-01-cat-without-file-name.png\" alt=\"stdin and stdout redirection\"></p>\r\n<p>Now we know, if we don\'t specify a filename, the <b>cat</b> command reads input data from the keyboard and displays that data on the monitor screen.\r\nWhat if, instead of displaying the output on the screen, we want to store the output in a file? No problem, we can easily do this by\r\nredirecting the <b>STDOUT</b> to the file. Let\'s do this by running the following command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$cat &gt; myfile\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>Since in this command we did not specify any input file, the <b>cat</b> command reads input data from the keyboard.\r\nBut, this time the <b>cat</b> command, instead of sending the output to the default monitor screen, sends the output to the file named <b>myfile</b>.</p>\r\n<p>The following image shows the above exercise with the output.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-09-02-redirecting-cat-output-to-a-file.png\" alt=\"stdout redirection\"></p>\r\n<p>We have stored the output in the file <b>myfile</b>.  Let\'s specify this file as the input file of the <b>cat</b> command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$cat myfile\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>This time, since we specified the filename, the <b>cat</b> command reads the input data from the specified file and displays that on the <b>STDOUT</b>.</p>\r\n<p>The following image shows the output of this command.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-09-03-cat-stdin.png\" alt=\"input and output redirection\"></p>\r\n<h3>Append mode V/s Overwrite mode</h3>\r\n\r\n<p>As mentioned earlier, the shell can redirect the output in two modes: the append mode and the overwrite mode. For the append mode, it uses the &gt;&gt; symbol. For the overwrite mode, it uses the &gt; symbol.</p>\r\n<p>Let\'s understand the difference between both modes through examples. We have created a file by redirecting and storing the output.\r\nIf we want to redirect or store another output in the same file, we have two options: append the existing contents and overwrite the existing contents.</p>\r\n<p>To append the existing contents, use the following command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$cat &gt;&gt; myfile\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>To overwrite the existing contents, use the following command.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$cat &gt; myfile\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the output of both commands.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-09-04-shell-redirect-append-and-overwrite-mode.png\" alt=\"io redirection append mode and overwrite mode\"></p>\r\n<h3>Redirecting errors</h3>\r\n<p>When we run a program, process, script, or command an error could occur. When an error occurs, the system sends that error in <b>STDERR</b>.\r\nSince by default <b>STDOUT</b> and <b>STDERR</b> use the same device (monitor screen), errors are also displayed on the monitor screen.</p>\r\n<p>If you want to redirect errors on another device or want to save them in a file for logging and debugging purposes, you can easily do this by\r\n using the same output redirection symbols. By default, the shell uses the symbol &gt; and &gt;&gt; to redirect the <b>STDOUT</b>.\r\n To use these symbols to redirect <b>STDERR</b>, we have to use file descriptors number of <b>STDERR</b> with these symbols.</p>\r\n<p>Linux uses a unified I/O model. In this model, it assigns a small integer value to each channel called a file descriptor.\r\nFile descriptors numbers of <b>STDIN</b>, <b>STDOUT</b>, and <b>STDERR</b> are <b>0</b>, <b>1</b>, and <b>2</b>. We can use these numbers\r\nto refer to the <b>STDIN</b>, <b>STDOUT</b>, and <b>STDERR</b> in our commands and scripts.</p>\r\n<p>To instruct the shell to redirect <b>STDERR</b> instead of <b>STDOUT</b>, precedes the output redirection symbol with the\r\nnumber <b>2</b> (file descriptor number of STDERR). To understand it more clearly, let\'s do a little exercise. Run the following commands.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$ls\r\n$cat [an-existing-file]\r\n$cat [an-existing-file] 2&gt; errorlog\r\n$cat errorlog\r\n$cat [non-existing file]\r\n$cat [non-existing file] 2&gt; errorlog\r\n$cat errorlog\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the above exercise with the output.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-09-05-error-redirection.png\" alt=\"stderr redirection\"></p>\r\n<p>In this exercise, first, we displayed the contents of an existing file by using the <b>cat</b> command. Later, we run the\r\nsame command again after adding the <b>\'2&gt; errorlog\'</b> to the command. When executing this command if any error occurs,\r\n the <b>\'2&gt; errorlog\'</b> instructs the shell to redirect that error to the <b>\'errorlog\'</b> file instead of displaying that error\r\n on the monitor screen. Since the input file exists, no error occurred. To verify this, we displayed the contents of the errorlog file.</p>\r\n<p>After this, we used the <b>cat</b>  command to display the contents of a non-existing file. Since the file doesn\'t exist,\r\n the shell displayed the <b>\'No such file or directory\'</b> error. Later, we executed the same command again by adding,\r\n  the <b>\'2&gt;errorlog\'</b> to the command. This time, since we instructed the shell to redirect errors in\r\n  the <b>\'errorlog\'</b> file, instead of displaying the error on the screen, the shell sent the error to the\r\n  file <b>\'errorlog\'</b>. To verify this, we displayed the contents of the <b>errorlog</b> file again. The <b>errorlog</b> file contains the error message.</p>\r\n<p>When redirecting <b>STDOUT</b>, we use the &gt;&gt; symbol to append the existing file. We can use the same &gt;&gt; symbol to append\r\nthe existing file when redirecting the <b>STDERR</b>. If you will the &gt; symbol to redirect <b>STDERR</b>, the shell will overwrite the\r\n contents of the specified file.</p>\r\n<p>Let\'s do a small exercise to understand it more clearly. Run the following commands on the terminal.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$cat nofile 2&gt; errorlog\r\n$cat errorlog\r\n$cat nonexistingfile 2&gt; errorlog\r\n$cat errorlog\r\n$cat unknownfile 2&gt;&gt; errorlog\r\n$cat errolog\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>In this exercise, we used the <b>cat</b> command to display the contents of three files that do not exist.\r\nSince files do not exist, we got error each time. We redirected errors to the <b>errorlog</b> file. To redirect errors,\r\nthe first and second times we used the overwrite mode while in the third time we used the append mode.</p>\r\n<p>The following image shows this exercise with the output.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-09-06-error-redirection-append-overwrite.png\" alt=\"stderr redirect\"></p>\r\n<p>As you can see in the above image, when we used the overwrite mode, the contents of the existing file were overwritten\r\nbut when used the append mode the contents of the existing file were appended.</p>\r\n<h4>Redirecting two or all three data streams together</h4>\r\n<p>If you want to redirect two or all three data streams together, you can do this by following the same way that you use to redirect one stream.\r\nFor example, the following command uses all three redirections together.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$cat &lt; testfile &gt; outputfile 2&gt; errorlog\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>This command reads/copies input data from the <b>testfile</b> and pastes that data in the <b>outputfile</b>. In this process, if any error occurs,\r\nit writes that error in the <b>errorlog</b> file.</p>\r\n<p>The following image shows this command with the output.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-09-07-stdin-stdout-stderr.png\" alt=\"error redirection append mode and overwrite mode\"></p>\r\n<h4>Sending errors to /dev/null</h4>\r\n<p>The <i>/dev/null</i> device discards all input data streams. This device is commonly used to discard errors and unwanted messages that occur when a process,\r\nscript, or command executes. For example, when you use the <b>find</b> command to search something globally, many <b>\"permission denied\"</b> errors\r\n might occur. Your genuine results may be lost in the clutter. To discard all errors, you can redirect <b>STDERR</b> to the <i>/dev/null</i>.\r\n Let\'s take an example to understand it practically.</p>\r\n<p>Run the following commands and compare their outputs.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">$find / -name core\r\n$find / -name core 2&gt; /dev/null\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the output of both commands.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-09-08-stderr-dev-null.png\" alt=\"redirecting errors to /dev/null\"></p>\r\n<p>As you can see in the above output, when we used the <b>find</b> command without redirecting <b>STDERR</b> , we got many permission related errors.\r\nBut when we used the <b>find</b> command with redirecting STDERR to <i>/dev/null</i>, we got only results.\r\nAll errors were redirected to <i>/dev/null</i> and all results\r\n were displayed on the screen.</p>\r\n<h3>I/O redirection summary</h3>\r\n<p>The following table summarizes I/O redirection symbols along with their meanings.</p>\r\n<div class=\"table-responsive\">\r\n<table class=\"table table-bordered table-hover\">\r\n<tbody><tr><td>Symbols</td><td> Description</td></tr>\r\n<tr><td>&lt; </td><td>To redirect the input</td></tr>\r\n<tr><td>&gt; </td><td>To redirect the output in overwrite mode</td></tr>\r\n<tr><td>2&gt; </td><td>To redirect the errors in overwrite mode</td></tr>\r\n<tr><td>&gt;&gt; </td><td>To redirect the output in append mode</td></tr>\r\n<tr><td>2 &gt;&gt; </td><td>To redirect the errors in append mode</td></tr>\r\n<tr><td>&gt;&amp; </td><td>To redirect both the output and errors in the same place in overwrite mode</td></tr>\r\n<tr><td>&gt;&gt;&amp; </td><td>To redirect both the output and errors in the same place in append mode</td></tr>\r\n</tbody></table></div>\r\n<p>That\'s all for this tutorial. If you like this tutorial, please don\'t forget to share it with friends through your favorite social channel.</p>\r\n</div>                    </div>', 'This tutorial explains the input/output redirection in Linux. Learn what the I/O redirection is and how it works in Linux through examples.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:07:46', '2021-09-27 03:07:46');
INSERT INTO `posts` (`id`, `user_id`, `type`, `title`, `content`, `mini_text`, `view`, `thumbnail_img_url`, `created_at`, `updated_at`) VALUES
(16, 1, 'linux', 'Tar command options and syntax explained', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>The tutorial explains how to use the tar command in Linux. Learn the most frequently used tar command\'s options (c,v,f,t, and x) in detail through examples.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>The tar command is used to create and manage archives in Linux. An archive is a collection of multiple files, which can be transferred as a single file or stored as a backup copy. An archive file created with the tar command is also known as a tarball file.</p>\r\n<h3>The tar command syntax</h3>\r\n<p>To create an archive file, the tar command uses the following syntax.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">tar [options] [destination-file-name.tar] [source-files or directories]\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>To list or extract and archived file, the tar command uses the following syntax.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">tar [options] [archived-file.tar]\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<h3>The tar command options</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>The following table lists the most common tar command\'s options with their description.</p>\r\n<div class=\"table-responsive\">\r\n<table class=\"table table-bordered table-hover\">\r\n<tbody><tr><td>Short option</td><td>	Long option</td><td>	Description</td></tr>\r\n<tr><td>-A</td><td>	--catenate	</td><td>Append the archive to the end of another archive.</td></tr>\r\n<tr><td>-c</td><td>	--create	</td><td>Create a new archive.</td></tr>\r\n<tr><td>-d</td><td>	--diff, --compare	</td><td>Find differences between archive and file system.</td></tr>\r\n<tr><td></td><td>	--delete	</td><td>Delete from the archive.</td></tr>\r\n<tr><td>-r</td><td>	--append	</td><td>Append files to the end of an archive.</td></tr>\r\n<tr><td>-t</td><td>	--list	</td><td>List the contents of an archive.</td></tr>\r\n<tr><td></td><td>	--test-label	</td><td>Test the archive volume label and exit.</td></tr>\r\n<tr><td>-u</td><td>	--update	</td><td>Append files which are newer than the corresponding copy in the archive.</td></tr>\r\n<tr><td>-x</td><td>	--extract, --get	</td><td>Extract files from an archive.</td></tr>\r\n<tr><td></td><td>	--show-defaults	</td><td>Show built-in defaults for various tar options and exit.</td></tr>\r\n<tr><td>-?</td><td>	--help	</td><td>Display a short option summary and exit.</td></tr>\r\n<tr><td></td><td>	--usage	</td><td>Display a list of available options and exit.</td></tr>\r\n<tr><td></td><td>	--version	</td><td>Print program version and copyright information and exit.</td></tr>\r\n<tr><td></td><td>	--check-device	</td><td>Check device numbers when creating incremental archives.</td></tr>\r\n<tr><td>-g</td><td>	--listed-incremental=FILE	</td><td>Handle new GNU-format incremental backups.</td></tr>\r\n<tr><td>-G</td><td>	--incremental	</td><td>Handle old GNU-format incremental backups.</td></tr>\r\n<tr><td></td><td>	--ignore-failed-read	</td><td>Do not exit with nonzero on unreadable files.</td></tr>\r\n<tr><td></td><td>	--no-check-device	</td><td>Do not check device numbers when creating incremental archives.</td></tr>\r\n<tr><td>-S</td><td>	--sparse	</td><td>Handle sparse files efficiently.</td></tr>\r\n<tr><td>-k</td><td>	--keep-old-files	</td><td>Don\'t replace existing files when extracting.</td></tr>\r\n<tr><td></td><td>	--keep-newer-files	</td><td>Don\'t replace existing files that are newer than their archive copies.</td></tr>\r\n<tr><td></td><td>	--keep-directory-symlink	</td><td>Don\'t replace existing symbolic links to directories when extracting.</td></tr>\r\n<tr><td></td><td>	--no-overwrite-dir	</td><td>Preserve metadata of existing directories.</td></tr>\r\n<tr><td></td><td>	--overwrite	</td><td>Overwrite existing files when extracting.</td></tr>\r\n<tr><td></td><td>	--recursive-unlink	</td><td>Recursively remove all files in the directory prior to extracting it.</td></tr>\r\n<tr><td></td><td>	--remove-files	</td><td>Remove files from disk after adding them to the archive.</td></tr>\r\n<tr><td></td><td>	--skip-old-files	</td><td>Don\'t replace existing files when extracting, silently skip over them.</td></tr>\r\n<tr><td>-U</td><td>	--unlink-first	</td><td>Remove each file prior to extracting over it.</td></tr>\r\n<tr><td>-W</td><td>	--verify</td><td>	Verify the archive after writing it.</td></tr>\r\n<tr><td>-O</td><td>	--to-stdout</td><td>	Extract files to standard output.</td></tr>\r\n</tbody></table></div>\r\n<p><em>Short options are not available for all tasks. If an equivalent short option is not available for a specific task, use the long option.\r\nWhile specifying the options, you can use a dash (-) before the options or not. For example, you can specify options as -cvf or as cvf. Tar supports both styles.\r\n</em></p>\r\n\r\n<h3>Tar command c, v, f, t, and x options</h3>\r\n\r\n<p>The <b>c, v, f, t,</b> and <b>x</b> are the most frequently used options with the tar command. Let\'s understand these options in detail.</p>\r\n<p>The option <b>c</b> creates an archive or a tarball from specified files or directories. If a directory is specified, all its files and sub-directories will be included in the archived file.</p>\r\n<p>The option <b>v</b> displays the progress of archiving process at the command prompt. This option is optional. You can use it; if you want see what the tar command is doing. Or you can skip it; if you don\'t want to print the progress of archiving process at the command prompt.</p>\r\n<p>The option <b>f</b> specifies the file where you want to store the output. If we don\'t specify this option, the tar command uses the standard output device (console or command prompt) to store the output data. In other words, if we don\'t specify the output file with this option, the tar command simply dumps all output data to the command prompt.</p>\r\n<p>While specifying a file to store the output data, usually the extension <b>.tar</b> is used with file name. Although it\'s not required, still you should always use this extension with the file name. Using an extension for archived files helps keeping them separate from other files.</p>\r\n<p>The option <b>t</b> lists the contents of the archive or tarball. Since this option lists the content of a file archive, the archive file must be specified with the option f.</p>\r\n<p>The option <b>x</b> extracts the archive. Just like the option t, this option also needs an archive file specified with the option <b>f</b>.</p>\r\n<p>The order of options is important. First specify the action (create, list or extract), next specify any additional requirement such verbose message, and in the last specify the name of file or device where the desired action should to be performed.</p>\r\n<p>The following image shows the correct sequence of using these options.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt35-01-tar-option-sequence.png\" alt=\"correct sequence of tar options\"></p>\r\n<p>The following syntaxes show the correct order of using these options.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">tar -cvf [destination-file-name.tar] [source-files or directories]\r\ntar -tvf archive-file.tar\r\ntar -xvf archive-file.tar\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>Let\'s take some examples to understand how these options are used.</p>\r\n<h3>Creating an archive or tarball</h3>\r\n<p>To create an archive, three options <b>c, v</b> and <b>f</b> are used together. The following command creates an archive from a single file named <b>test</b> and puts that archive file in the same directory.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -cvf  test.tar test\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the above command.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt35-02-tar-single-file-example.png\" alt=\"creating tar archive \"></p>\r\n<p>To add multiple files into the archive, specify them as arguments. For example, the following command creates an archive file <b>files.tar</b> from files; <b>a, b, c, d</b> and <b>f</b>.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -cvf files.tar a b c d f\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the output of the above command.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt35-03-tar-multiple-files-example.png\" alt=\"adding multiple files to an archive\"></p>\r\n<p>Just like the files, we can also specify the directories as arguments. If we specify a directory as an argument, all of its files and sub-directories are recursively added into the archived file. For example, the following command creates an archived file <b>data.tar</b> from the directory <b>testdir</b>.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -cvf data.tar testdir\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the output of the above command.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt35-04-adding-directories-recursively-in-archive.png\" alt=\"adding files to archive\"></p>\r\n<p>If files and directories that you want to add into the archive file are not available in the current directory, you must have to specify their full paths. For example, the following command creates an archive <b>conf.tar</b> from the files: <b>/etc/hosts, /etc/hostname and /etc/host.conf</b>.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -cvf  /etc/hosts /etc/hostname /etc/host.conf\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the output of the above command.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt35-05-tar-adding-files-from-other-directory.png\" alt=\"tar command adding a partition to archive\"></p>\r\n<p>Just like we can create an archive from files which are not available in the current directory, we can also put the archived file on any location or device. For example, the following command adds all files and directories from the <b>home</b> partition into the archive <b>home.tar</b> and stores the archive on the <b>/tmp</b> partition.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">#tar -cvf /tmp/home.tar /home\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the output of the above command.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/linux-tutorials/lt35-06-adding-all-files-recursively.png\" alt=\"adding files from another directory\"></p>\r\n<p>That\'s all for this tutorial. In the next parts of this tutorial, we will understand how to extract and manage an archived file. We will also take some advance examples of the tar command.</p>\r\n<div class=\"art-part-block\">\r\n<p>This tutorial is the first part of the article <b>\"How to use Tar Command in Linux Explained with examples\"</b>. The next parts of this article are the following.</p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/linux-tutorials/tar-command-examples-in-linux.html\" target=\"_blank\">Tar command examples in Linux </a></p>\r\n<p><em class=\"small\">This is the second part of this article. It explains how to manage an archive after creation.</em></p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/linux-tutorials/tar-command-compress-and-extract-archives.html\" target=\"_blank\">Tar command Compress and Extract Archives</a></p>\r\n<p><em class=\"small\">This is the third and last part of this article. It explains how to compress and extract a compressed archive in detail.</em></p>\r\n</div>\r\n<p> If you like this tutorial, please don\'t forget to share it with friends through your favorite social network.</p>\r\n</div>                    </div>', 'The tutorial explains how to use the tar command in Linux. Learn the most frequently used tar command\'s options (c,v,f,t, and x) in detail through examples.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:08:05', '2021-09-27 03:08:05'),
(17, 1, 'linux', 'STDIN STDOUT STDERR in Linux', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains standard data streams in Linux. Learn what the STDIN, STDOUT, and STDERR are and how they are used in Linux through examples.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Linux is an operating system. Taking input commands, processing them and providing results are the main functions of an operating system. Typically, these tasks are performed by various components of the operating system.</p>\r\n<p>To transfer data between various components, Linux uses data streams. A data stream is a flow of text data between a source, a processing unit, and a destination. A source and a destination can be any device, program or process that sends and receives data, respectively.</p>\r\n<p>A processing unit sits between the source and the destination. It can be a command, script, program, process, or a processing device. It receives data from the source, processes it, and sends the processed data to the destination. If any error occurred when processing the incoming data, based on the configuration it sends the error to either the same destination or to a separate error handling destination.</p>\r\n<p>Processing unit uses three different types of data streams. These streams are the input data stream, output data stream, and the error data stream. The input data stream connects the source to the processing unit. The output data stream and the error data stream connect the processing unit to the output destination and the error handling destination, respectively.</p>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>The following image shows how data flows in data streams.</p>\r\n<p> <img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-08-01-data-streams.PNG\" alt=\"examples of data stream in linux\" src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-08-01-data-streams.PNG\"></p>\r\n<h3>Standards streams (STDIN, STDOUT, STDERR)</h3>\r\n<p>Linux defines the input data stream, output data stream, and the error data stream as the STDIN (Standard Input), STDOUT (Standard Output), and STDERR (Standard Error), respectively. Linux uses data streams as communication channels. When we open a file, execute a command, or start a process, Linux automatically attaches these channels (STDIN, STDOUT, and STDERR) to it.</p>\r\n\r\n<p>Let\'s understand these channels in detail.</p>\r\n<p>STDIN works between the source and the processing unit. The source provides the data and the processing unit receives and processes the data. Let\'s take a simple example to understand how STDIN works.</p>\r\n<p>A user accesses a shell prompt and types a command by using the keyboard and hits the <b>Enter</b> key. The shell receives the command and executes it. In this process, the keyword is the source and the shell is the processing unit.</p>\r\n<p>The keyboard places the typed characters (command) in the STDIN or input data stream. Since the other ends of the STDIN is connected to the shell, the shell receives the typed characters and processes them as a command.</p>\r\n<p>The default device for  STDIN or input data stream is the keyboard. To place data in the input data stream, you can use the default device, or can use any other source of data such as the output of any command, and a file.</p>\r\n<p>The processing unit processes the command and loads the output of the command in STDOUT or output data stream. The device or application that is connected to the other end of the output data stream receives the output and based of its configuration processes the output data.</p>\r\n<p>For example, if a monitor is connected to the other end of the data stream, it displays the output on the screen. Or if a printer is connected to the other end of the data stream, it prints the output.</p>\r\n<p>The monitor is the default the output device. Just like STDIN, you can connect any device or application to the other end of the output data stream to receive the output or processed data.</p>\r\n<p>The following image shows the flows of data between STDIN and STDOUT.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-08-02-stdin-stdout.png\" alt=\"stdin and stdout example linux\"></p>\r\n<p>STDERR or error data stream handles errors. If the processing unit finds any error when processing the received data, it loads that error in the error data stream. The device that connected to the other end of the stream handles the error.</p>\r\n<p>The monitor is the default STDERR device. The monitor displays the error on the screen. The following image shows how data flows between two ends of the STDERR stream.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/basic-linux/bl-08-03-stdin-stderr.png\" alt=\"stdin stderr linux\"></p>\r\n<p>Standard data streams are very flexible. You can manipulate them as you want. You can redirect the output data stream on any device, program, process, or even you can store it as a file. Same way, you can also use any file, device, or even the output of a process as the input stream.</p>\r\n<p>To manipulate data streams, I/O redirections are used. To learn I/O redirections, you can check the following tutorial.</p>\r\n<p><a href=\"https://www.computernetworkingnotes.com/basic-linux/input-output-redirection-in-linux.html\" target=\"_blank\"> Input Output Redirection in Linux</a></p>\r\n<p>This tutorial explains I/O redirections in detail.</p>\r\n<p>That\'s all for this tutorial. If you like this tutorial, please consider to share it through your favorite social channel.</p>\r\n</div>                    </div>', 'This tutorial explains standard data streams in Linux. Learn what the STDIN, STDOUT, and STDERR are and how they are used in Linux through examples.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:08:23', '2021-09-27 03:08:23'),
(18, 1, 'linux', 'Differences between Absolute path and Relative path in Linux', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains what the absolute path and the relative path names are in Linux with examples. Learn the differences between the absolute path and the relative path along with the meaning of single dot and double dots in pathname.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Linux file system is built from files and directories. Files are used to store the data. Directories are used to organize the files systematically. The directory root (/) is the main directory in Linux. All directories and files are created and managed under this directory. The location of a file or directory from this directory is known as the path of that file or directory. A path, based on how it is written, can be categorized in two types; absolute path and relative path.</p>\r\n<h2>Absolute Path</h2>\r\n<p>Absolute path starts from the directory root (/) and goes up to the actual object (file or directory). It contains the names of all directories that come in the middle of the directory root and the actual object. In this, name of the parent directory is written in the left.</p>\r\n<p>Let’s take an example, suppose a user named sanjay creates a directory named test in his home directory. What will the absolute path of this directory?</p>\r\n<p>To write the absolute path of this directory, we have to start writing the path from the directory root. The directory root is written as <b>/</b> (forward slash).</p>\r\n<p>After <b>/</b> (root directory), we have to write the name of the directory in which user’s home directory is located.\r\n By default, Linux places user’s home directory in the directory named <b>home</b>. Usually, this directory is created just under the directory root (<b>/</b>).</p>\r\n<p>If we write the name of the home directory just after the root directory, we get the absolute path of the home directory.</p>\r\n<p>If we write the name of the user’s home directory just after the absolute path of the home directory, we get the absolute path of the user’s home directory.\r\n By default, Linux uses user’s username to create user’s home directory. In this example, username is sanjay, hence the name of its home directory is also sanjay.</p>\r\n<p>Following the same track, if we write the name of the directory or file which is created in user’s home directory just after the\r\n absolute path of the user’s home directory, we get the absolute path of that directory or file.</p>\r\n<p>In this example, absolute path of the directory test will be; <b>/root/home/sanjay/test</b>.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg20-01-absolute-path-example.png\" alt=\"example of absolute path\" src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg20-01-absolute-path-example.png\"></p>\r\n<h5>Key points</h5>\r\n<ul class=\"ul-arrow\">\r\n  <li>	First forward slash (/) in the absolute path represents the directory root. Besides this, all slashes in the path represent the directory separator.</li>\r\n  <li>	Besides the last name, all names in the absolute path belong to directories. Last name can belong to file or directory.</li>\r\n  <li>	In the absolute path, directories names are written in their hierarchy order. Parent directory’s name is written in the left side.</li>\r\n  <li>	Absolute path does not change when we change the current directory.</li>\r\n  <li>	To know to the absolute path of the current directory, we can use the command pwd.</li>\r\n</ul>\r\n<h2>Relative path</h2>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Relative path starts from the current directory and goes up to the actual object. Relative path depends on the current directory. When we change the directory, relative path also changes. Just like the absolute path, the name of the parent directory is written in the left side. Unlike the absolute path, all slashes in the relative path represent the directory separator.</p>\r\n<p>Before we take the examples of the relative path, let’s understand the special meanings of single dot and double dots used in the relative path.</p>\r\n<h3>Single dot (.) and double dots (..) in Linux</h3>\r\n<p>In Linux every directory contains two dots; single dot and double dots. When a directory is created,\r\nboth the single dot and the double dots are also automatically created in it. By default these dots are hidden and do not show in the output of the command ls. To view these dots, we have to use the option a with the command ls.</p>\r\n<p>The single dot refers to the directory itself and the double dots refers to its parent directory or the directory\r\nthat contains it. Shell allows us to access the current directory and the parent directory by using the single dot and the double dots respectively.</p>\r\n<p>Relative path also uses these dots to represent the current directory and the parent directory respectively.\r\nWith the use of these dots, we can build the relative path of any file or directory from the current directory.</p>\r\n<p>Following figure shows the relative path of the directories used in previous example.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg20-02-relative-path-example.png\" alt=\"example of relative path\"></p>\r\n<p>Let’s take another example. Suppose a user want to access a file that is available two directories above in hierarchy from his\r\ncurrent directory. To access this file, he can use the following relative path.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">../../file\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>Just like it, if the file is available in three directories above in the hierarchy, he can use the following path.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">../../../file\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>Relative path of the file or directory that is below in hierarchy always starts with a single dot followed by a forward slash as <kbd>./</kbd>.\r\nThe <b>./</b> represent the current directory.</p>\r\n<p>Unlike the parent directory, no symbol (dot or dots) is used for the child directory. If the file or directory is available in the directory that\r\n is below in the hierarchy, we must have to use the actual names of child directories in path.</p>\r\n<p>For example, a file named abc is available in the directory named dir1 and the directory dir1 is available in the current directory, relative path of this file will be following.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">./dir1/abc\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>To execute a command, Shell uses current directory as the default directory.\r\n Because of this, if the target object is available in the child directory of the current directory, we can omit the leading <b>./</b> from the relative path.\r\n  For example, to access the above file we can also use the following path.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">dir1/abc\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>In some situations, skipping current directory from the relative path makes it ambiguous.\r\nIn such situations, we must have to use the full relative name including the current directory. For example, to run a\r\nscript from the current directory, we must have to use the full relative name.</p>\r\n\r\n<p>Let’s take few more examples to understand absolute path, relative path and the use of dots in the relative path practically.</p>\r\n<p>Access Shell prompt and create a directory named dir1. Create a file named abc in this directory.\r\nAlso create a simple script named simple.sh in the current directory.</p>\r\n<p>Now run the commands listed in the following table.</p>\r\n<div class=\"table-responsive\">\r\n<table class=\"table table-bordered table-hover\">\r\n<tbody><tr><td>Command</td><td>	Description</td><td>	Path</td></tr>\r\n<tr><td>cat ./dir1/abc</td><td>	Print the contents of the file abc. </td><td>	Use relative path. <em class=\"small\">Include current directory</em></td></tr>\r\n<tr><td>cat dir1/abc</td><td>	Print the contents of the file abc.</td><td>	Use relative path. <em class=\"small\">Skip current directory</em></td></tr>\r\n<tr><td>cd ./dir1</td><td>	Change current directory to dir1</td><td>	Use relative path.</td></tr>\r\n<tr><td>cd ..</td><td>	Change current directory to parent directory</td><td>	Use relative path.</td></tr>\r\n<tr><td>cd /home/sanjay/dir1</td><td>	Change current directory to dir1</td><td>	Use absolute path.</td></tr>\r\n<tr><td>cp ./dir1/abc .</td><td>	Copy the file abc in current directory</td><td>	Use relative path.</td></tr>\r\n<tr><td>./simple.sh</td><td>	Run script from current directory</td><td>	Use relative path</td></tr>\r\n</tbody></table></div>\r\n<p>Following figure illustrates above practice.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/linux/rhce-study-guide/rsg20-03-example-of-absolute-path-and-relative-path.png\" alt=\"absolute path and relative path examples \"></p>\r\n<p>That’s all for this tutorial. If you like this tutorial, please don’t forget to share it with friends through your favorite social network.</p>\r\n</div>                    </div>', 'This tutorial explains what the absolute path and the relative path names are in Linux with examples. Learn the differences between the absolute path and the relative path along with the meaning of single dot and double dots in pathname.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:08:56', '2021-09-27 03:08:56'),
(19, 1, 'ccna', 'How Access Lists work on Cisco routers', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains the basic concepts and fundamentals of Cisco access lists. Learn what Cisco access lists are and how they work through examples.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>An access list is a security feature. It allows a device to process data more intelligently. Cisco routers support access lists. Before we discuss how access lists work on Cisco routers or how Cisco routers use access lists to filter IP packets, let\'s briefly discuss how routers forward IP packets.</p>\r\n<p>When routers receive IP packets on their interfaces, they check the destination address of each packet and forward that packet from the interface that is directly connected to the destination address or the path leading to the destination address. If none of the router\'s interfaces are connected to the destination address, the router discards the packet.</p>\r\n<p>An access list is a set of additional commands or instructions that you can instruct a router to perform before forwarding IP packets. In the access list, each command or instruction is written on a separate line. Each line of the access list is treated as a separate entry.</p>\r\n<p>An access list can contain many entries. Each entry must include a criterion and an action. A criterion defines the condition that triggers the action. An entry may include multiple criteria or actions.</p>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Let\'s take an example to understand how access lists work. The following image shows a sample school network.</p>\r\n<p><img class=\" lazyloaded\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg92-01-access-control-list-example-lab.png\" alt=\"acl example network\" src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg92-01-access-control-list-example-lab.png\"></p>\r\n<p>In this network, four LAN segments are connected through a router. These segments are Students, Teachers, Staff, and Administrators. These segments respectively belong to students, teachers, office staff, and management team.</p>\r\n<p>The following table lists the IP configurations of all segments.</p>\r\n<div class=\"table-responsive\">\r\n<table class=\"table table-bordered table-hover\">\r\n<tbody><tr><td>LAN  </td><td>	Network Address</td><td>	Default gateway</td><td>	Gateway interface</td></tr>\r\n<tr><td><b>Students</b></td><td>	10.0.0.0/8</td><td>	10.0.0.1</td><td>	Router\'F0/0</td></tr>\r\n<tr><td><b>Teachers</b></td><td> 	20.0.0.0/8</td><td>	20.0.0.1</td><td>	Router\'F0/1</td></tr>\r\n<tr><td><b>Staff</b></td><td>	30.0.0.0/8</td><td>	30.0.0.1</td><td>	Router\'F1/0</td></tr>\r\n<tr><td><b>Administrators</b></td><td>	40.0.0.0/8</td><td>	40.0.0.1 </td><td>	Router\'F1/1</td></tr>\r\n</tbody></table></div>\r\n<p>As far as connectivity is concerned, this network is fine. All LAN segments can access each other without any issues. The main issue of this network is security. This network has no security policy. Anyone can access any resource of the network. A student can access the teacher\'s computer. A teacher can access the principal\'s computer. This free flow of access makes this network useless. This network will be useful only if it allows only authorized users to access permitted resources.</p>\r\n\r\n<p>To block unauthorized access, Cisco routers have a built-in feature. This feature is known as <b>access-lists</b>. An access list allows the administrator to define what is allowed and what is blocked.</p>\r\n<p>Once the criteria for allowed packets are defined, the router will only allow packets that meet the defined criteria. Access lists are used to define criteria for allowed packets. Access lists use lines to separate entries. Each line in the access list represents an entry. Each entry contains two things a condition and an action. When processing the entry, the router matches the condition, if the condition is matched, the router executes the action. A condition may include a single criterion or multiple criteria.</p>\r\n<p>When creating an access list entry, you should keep three important factors in mind. These factors are location, direction, and order. Let us discuss these factors.</p>\r\n<h3>Location</h3>\r\n<p>Access lists are applied to interfaces. For example, if a router has two interfaces, you can apply different access lists on both interfaces. An interface can only use its own ACL to filter the traffic that passes through it. It can\'t use the ACL of the other interface. If you apply an ACL to an interface that does not interact with targeted traffic, that ACL will not work. Because of this, access lists must be implemented on the flow of packets.</p>\r\n<h3>Direction</h3>\r\n<p>An access list can be applied on either the entry point or the exit point of the router. If the access list is applied to the entry point, it will be used to process incoming packets. If the access list is applied to the exit point, it will be used to process outgoing packets.  To filter incoming traffic, the access list uses source addresses. To filter outgoing traffic, the access list uses destination addresses.</p>\r\n<h3>Order</h3>\r\n<p>Once the access list is implemented, the router processes each packet through the access list. For each packet, the router checks each entry in the access list from top to bottom until a match is found. Once a match is found, the router executes the corresponding action. It does not check the remaining entries for that packet. If an access list has multiple entries for the same packet, the router will only execute the action of the first entry from the top.</p>\r\n<p>Let\'s understand the above factors through our example.</p>\r\n<h3>Location</h3>\r\n<p>In our example network, all LAN segments can access all LAN segments. To block students from accessing resources available outside the Students segment, the administrator created an access list and applied it on the <b>F0/0</b> interface of the router. The ACL has the following entry.</p>\r\n<p>If a packet has the source address from the network address <b>10.0.0.0/8</b>, then discard the packet.</p>\r\n<p>The following image shows how this ACL is applied.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg92-02-how-acl-work-example-first.png\" alt=\"acl working \"></p>\r\n<p>Since all packets generated from the <b>Students</b> segment have source addresses from the <b>10.0.0.0/8</b> network, they will be blocked as soon as they enter the <b>F0/0</b>. After this ACL, users from the <b>Students</b> segment will not be able to access outside resources.</p>\r\n<p>To understand how the direction affects the ACL, let\'s suppose the administrator applied the above ACL on the <b>F0/1</b> interface.</p>\r\n<p>The following image shows this change.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg92-03-acl-location-mis-configuration.png\" alt=\"acl wrong location\"></p>\r\n<p>Now, this ACL is useless. This ACL instructs the router to block a packet if it arrives from the <b>10.0.0.0/8</b> network. A packet from the <b>10.0.0.0/8</b> will never enter from the <b>F0/1</b> interface. The <b>F0/1</b> interface is the default gateway of the <b>Teachers</b> segment. Since the network address of the <b>Teachers</b> segment is <b>20.0.0.0/8</b>, all packets entering F0/1 will have a source address from the network <b>20.0.0.0/8</b>.</p>\r\n<p>This example shows how the correct location of the ACL is important.  An ACL must be implemented on the interface that interacts with targeted traffic.</p>\r\n<h3>Direction</h3>\r\n<p>Now suppose, instead of using the source address in the ACL entry, the administrator mistakenly used the destination address. The modified ACL is given below.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">If the destination address of a packet is from network 10.0.0.0/8, discard the packet.\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The administrator applied this ACL on the <b>F0/0</b> interface of the router. Will this ACL work?</p>\r\n<p>The following image show new the ACL.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg92-04-acl-direction-mis-configuration.png\" alt=\"acl incorrect direction\"></p>\r\n<p>This ACL will not work. This ACL instructs the router to block the packets that are going to the network <b>10.0.0.0/8</b>, not to the packets that are coming from the network <b>10.0.0.0/8</b>. If you apply this ACL on the <b>F0/0</b>, the <b>Students</b> segment will be able to access all three segments but they will not be able to access the <b>Students</b> segment.</p>\r\n<h3>Order</h3>\r\n<p>As mentioned earlier, for each packet, the router checks ACL entries from top to bottom until a match is found. Once a match is found, it does not check the remaining entries for that packet. Let\'s understand this factor through the example.</p>\r\n<p>The administrator wants to allow a user from the <b>Teachers</b> segment to access the server available in the <b>Administrators</b> segment. The IP address of the allowed user is <b>20.0.0.3/8</b>.  Apart from the allowed user, all remaining users must not be able to access the <b>Administrators</b> segment. For this, the administrator created the following ACL and applied it to the <b>F0/1</b> interface of the router.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">Drop the packet if its source address belongs to the network 20.0.0.0/8\r\nAllow the packet if its source address is 20.0.0.3/8\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows this ACL.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg92-05-acl-order-mis-configuration.png\" alt=\"acl wrong order\"></p>\r\n<p>Will this ACL work? No, this ACL will block all outgoing traffic from the <b>Teachers</b> segment. When a packet originated from the host <b>20.0.0.3/8</b> reaches the router, the router checks the entries of the applied ACL until a match is found.</p>\r\n<p>The first line of the ACL says \"<em>drop the packet if its source address belongs to the network 20.0.0.3/8</em>\". Since the IP address <b>20.0.0.3/8</b> belongs to the network <b>20.0.0.0/8</b>, the statement becomes true. The router executes the action that is associated with this statement. Since the action of this statement is the drop, the router drops the packet.</p>\r\n<p>Even the second line of the ACL allows the host <b>20.0.0.3/8</b>, but it will never be read and executed by the router. The correct order to allow the host <b>20.0.0.3/8</b> will be the following.</p>\r\n<div class=\"code\"><pre style=\"position: relative;\">Allow the packet if its source address is 20.0.0.3/8\r\nDrop the packet if its source address belongs to the network 20.0.0.0/8\r\n<div class=\"open_grepper_editor\" title=\"Edit &amp; Save To Grepper\"></div></pre></div>\r\n<p>The following image shows the above ACL.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg92-06-acl-correct-order.png\" alt=\"acl correct order\"></p>\r\n<p>Now, this ACL will allow all packets that are originated from the host <b>20.0.0.3/8</b> but it will block all packets that are originated from other hosts of the network <b>20.0.0.0/8</b>.</p>\r\n<p>That\'s all for this tutorial. In this tutorial, we discussed what ACLs are and how they work. To understand how ACLs work, we used simple sentences for ACL entries. Actual ACL entries use specific keywords to define criteria and actions. In the next tutorial, we will discuss how actual ACL entries are built and how they work.</p>\r\n</div>                    </div>', 'This tutorial explains the basic concepts and fundamentals of Cisco access lists. Learn what Cisco access lists are and how they work through examples.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:09:28', '2021-09-27 03:09:28');
INSERT INTO `posts` (`id`, `user_id`, `type`, `title`, `content`, `mini_text`, `view`, `thumbnail_img_url`, `created_at`, `updated_at`) VALUES
(20, 1, 'ccna', 'Malware, Spyware, Virus, Worm, and Trojan horse', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains the types or classes of malware. Learn what viruses, worms, spyware, and Trojan horses are, how they work and how they differ from each other.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>A malware is any form of malicious code that is designed to perform a malicious task. Generally, malicious programs are created to corrupt data, crash applications, harass users, and perform many other malicious actions. A malware is classified based on the way it works. In the following section, we will discuss four classes of malware. These classes are viruses, worms, spyware, and Trojan horses.</p>\r\n<h3>Viruses</h3>\r\n<p>A virus is a small executable and self-replicating computer program. The developer designs the virus in such a way that it can secretly attach to other programs. The developer attaches the virus to a legitimate application or software and shares the application on the Internet. When a user downloads and installs that application, the virus is also secretly installed on the user\'s computer.</p>\r\n<p>Virus invokes whenever the application is invoked. Since the virus is self-replicating, it will make a copy of itself every time the application is invoked. In addition to self-replication, viruses can also include instructions to perform malicious tasks such as damaging system files, corrupting user data files, causing applications to behave unexpectedly.</p>\r\n<h3>Types of viruses</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Viruses can be categorized by where they reside and by how they work. The most common types of viruses are the following.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg91-01-viruses.png\" alt=\"viruses\"></p>\r\n<h4>Boot-sector viruses</h4>\r\n<p>These viruses infect the boot sector of the hard disk. Operating systems use the boot sector in the booting process. If a virus hides in the boot sector of the hard disk containing the operating system, the virus is executed when the operating system boots. This means the virus will replicate every time the machine boots.</p>\r\n<h4>File viruses</h4>\r\n<p>These viruses target executable files. They hide themselves in executable files such as .exe, .cmd, and .bat files. When a user executes an executable that contains a virus, the virus executes with the file as well. When the virus executes, it reproduces itself and damages the system in the way the virus developer intended.</p>\r\n<h4>Polymorphic viruses</h4>\r\n<p>These viruses modify themselves as they reproduce. Since a polymorphic virus changes each time when it is executed, it is the hardest virus to detect. An antivirus program can\'t detect it until the program knows the specific evolution algorithm.</p>\r\n<h4>Macro viruses</h4>\r\n<p>These viruses target applications that support or use scripting languages. The virus developer hides the macro virus in a file that the target application supports and sends the file as an email attachment to the user. When the user opens the attachment, the macro code executes. For example, Microsoft office supports macros. The virus developer can hide macro viruses in Microsoft document files or Microsoft spreadsheets</p>\r\n<h3>Worms</h3>\r\n\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg91-02-worms.png\" alt=\"worms\"></p>\r\n<p>Worms are self-executable codes or scripts. They do not need a host application to attach themselves. Once a system is infected with a worm, the worm uses the vulnerabilities of the system to replicate itself and to spread other systems. Worms consumes system resources to slow it down.</p>\r\n<h3>Trojan horses</h3>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg91-03-trojan-horse.png\" alt=\"trojan horse\"></p>\r\n<p>Trojan horses masquerade as a legitimate application. They usually trick users into divulging their credentials or sensitive information. A Trojan horse can spread from one computer to another only through user interaction such as downloading pirated software from the Internet, opening email attachments that contain Marcos, or attaching a USB drive into an infected computer.</p>\r\n<h3>Spyware</h3>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg91-04-spyware.png\" alt=\"spyware\"></p>\r\n<p>Malware developer uses spyware to secretly monitor target systems. Once the spyware is installed on the target system, the spyware secretly monitors all activities of the user and sends them to the developer.</p>\r\n<h3>Differences viruses, worms, Trojan horses, and Spyware</h3>\r\n<p><b>Viruses</b> attach with other applications or executable files. When infected files are executed, the attached virus installs on the host system. Each time when the infected application is launched, the virus replicates itself. Viruses are created to modify, corrupt, or delete the system or data files. Viruses have no remote connections. They can\'t be controlled from the remote system. To spread from one computer to another, they depend on host applications and user interactions.</p>\r\n<p><b>Worms</b> are directly installed on the target system. Once installed, they consume all available resources of the host system, causing the system to slow down. They are mainly created to slow down systems. They replicate themselves. They can be controlled from the remote system. To spread from one computer to another, they use the vulnerabilities of the host system. Worms spread faster than viruses.</p>\r\n<p><b>Trojan horses</b> hide in other legitimate programs. When a user installs an infected program, the trojan horse is also installed on the host system. After installation, it waits for a command from the developer. It works like a sleeper cell. It only executes when it gets a command from the developer. After execution, it gives unauthorized access and control of the system to the developer. Trojan horses do not replicate. They don\'t spread from one computer to another.</p>\r\n<p><b>Spyware</b> also hides in another program. When the user installs the infected program, spyware is also installed on the target system. After installation, it actively monitors user\'s activities on the host system and sends them to the developer. The developer can use them for commercial purposes without the user\'s consent. Spyware does not replicate and spread from one computer to another computer.</p>\r\n<p>That\'s all for this tutorial. In this tutorial, we discussed the four most common types of malware. If you like this tutorial, please share it on Facebook and subscribe to our YouTube channel.</p>\r\n</div>                    </div>', 'This tutorial explains the types or classes of malware. Learn what viruses, worms, spyware, and Trojan horses are, how they work and how they differ from each other.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:10:15', '2021-09-27 03:10:15'),
(21, 1, 'ccna', 'Reconnaissance attacks, Tools, Types, and Prevention', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains reconnaissance attacks in detail. Learn what reconnaissance attacks are, types of reconnaissance attacks, how reconnaissance attacks are performed, and how to prevent a network from reconnaissance attacks.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<h3>What is a reconnaissance attack?</h3>\r\n<p>A reconnaissance attack is a type of security attack that an attacker uses to gather all possible information about the target before launching an actual attack. An attacker uses a reconnaissance attack as a preparation tool for an actual attack.</p>\r\n<h2>Types of reconnaissance attacks</h2>\r\n<p>There are three types of reconnaissance attacks. These are social, public, and software. Let\'s discuss these types in detail.</p>\r\n<h3>Social reconnaissance attacks</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>In this type of attack, a hacker uses social engineering to gather information about the target. Users share a lot of personal and business information on social networking sites. A hacker can use social networking sites to gather information about the target. For example, if the target is a company, the hacker can use social networking sites to reveal information about the company\'s employees.</p>\r\n<p>A hacker can use honey trap techniques to lure an employee. Once the employee accepts the friend request of the hacker, the hacker starts the next step. In the next step, the hacker convinces the employee to reveal information about his business. For example, the hacker may provide technical support to the employee on his project. Or the hacker may offer some monetary reward for disclosing information about the company.</p>\r\n<p>To reduce social reconnaissance attacks, a company must train its employees about what information they cannot share with others within and outside the company. Employees should never share sensitive information on any social platform. If an employee shares any confidential information with unknown persons or outside users, the company must take appropriate action against the employee.</p>\r\n<h3>Public reconnaissance attacks</h3>\r\n<p>In this type of attack, a hacker collects information about the target from public domains. Companies share location and business model information on their websites. A hacker can use this information to determine the location of the target. From this information, a hacker can also determine what kind of infrastructure the target uses. For example, most web hosting companies share information about their servers and security equipment. Companies share this information to attract new customers and gain the trust of existing customers. Hackers can use this information to find vulnerabilities in the company\'s network.</p>\r\n<p>To mitigate public reconnaissance attacks, companies should not share confidential information on public platforms. For business requirements, if a company wants to share information about its infrastructure, instead of sharing exact hardware information, it should share generic information. Generic information will fulfill the business requirement. From generic information, a hacker can\'t guess the product information. For example, if a company uses the Cisco Firepower 4100 Firewall, it may publish that we use the Cisco Firewall.</p>\r\n<h3>Software reconnaissance attacks</h3>\r\n\r\n<p>In this type of attack, a hacker uses software tools to gather information about the target. Operating systems and software packages include many tools and utilities for debugging and troubleshooting. A hacker can use them to collect information about the network and its resources. For example, a hacker can use the <b>nslookup</b> command to perform a DNS lookup. The <b>nslookup</b> command resolves an IP address from a fully qualified domain name. Once the hacker knew the domain name of the business, the hacker can use the whois database to reveal detailed information about domain owners, mail servers, contact information, authoritative DNS servers, etc.</p>\r\n<p>In the next step, the hacker can use the <b>ping</b> command. The <b>ping</b> command sends packets to the target host. If the target host is live, the host replies to the packets. Reply packets verify that the target host is live. The following image shows the sample output of the <b>ping</b> command.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg90-01-ping-facebook.png\" alt=\"ping command\"></p>\r\n<p>In addition to the <b>ping</b> command, the hacker can also use the <b>tracert</b> command. The <b>tracert</b> command prints the path that packets use to reach the destination device. With the help of the <b>ping</b> command and the <b>tracert</b> command, a hacker can create a visual map of the target network. The following image shows an example of the <b>tracert</b> command.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg90-02-tracert-facebook.png\" alt=\"tracert command\"></p>\r\n<p>In the next step, the hacker can use port scanners to detect running services on the target host. To scan services, the hacker can use <b>nmap</b> scanner.  The following image shows a sample output of the <b>nmap</b> port scanner.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg90-03-nmap-demo.png\" alt=\"nmap command\"></p>\r\n<p>To mitigate software reconnaissance attacks, an administrator can use the following techniques: -</p>\r\n<ul class=\"ul-arrow\">\r\n  <li>	Can disable all unused ports on servers</li>\r\n  <li>	Can use the masking service to hide sensitive information on the <b>whois</b> database</li>\r\n  <li>	Can use NAT to hide the internal structure of the network</li>\r\n  <li>	Can use software or hardware firewall to filter all specious traffic</li>\r\n</ul>\r\n<p>That\'s all for this tutorial. In this tutorial, we discussed what reconnaissance attacks are and how they work in detail.</p>\r\n</div>                    </div>', 'This tutorial explains reconnaissance attacks in detail. Learn what reconnaissance attacks are, types of reconnaissance attacks, how reconnaissance attacks are performed, and how to prevent a network from reconnaissance attacks.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:11:13', '2021-09-27 03:11:13'),
(22, 1, 'ccna', 'Reconnaissance attacks, Tools, Types, and Prevention', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains reconnaissance attacks in detail. Learn what reconnaissance attacks are, types of reconnaissance attacks, how reconnaissance attacks are performed, and how to prevent a network from reconnaissance attacks.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<h3>What is a reconnaissance attack?</h3>\r\n<p>A reconnaissance attack is a type of security attack that an attacker uses to gather all possible information about the target before launching an actual attack. An attacker uses a reconnaissance attack as a preparation tool for an actual attack.</p>\r\n<h2>Types of reconnaissance attacks</h2>\r\n<p>There are three types of reconnaissance attacks. These are social, public, and software. Let\'s discuss these types in detail.</p>\r\n<h3>Social reconnaissance attacks</h3>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>In this type of attack, a hacker uses social engineering to gather information about the target. Users share a lot of personal and business information on social networking sites. A hacker can use social networking sites to gather information about the target. For example, if the target is a company, the hacker can use social networking sites to reveal information about the company\'s employees.</p>\r\n<p>A hacker can use honey trap techniques to lure an employee. Once the employee accepts the friend request of the hacker, the hacker starts the next step. In the next step, the hacker convinces the employee to reveal information about his business. For example, the hacker may provide technical support to the employee on his project. Or the hacker may offer some monetary reward for disclosing information about the company.</p>\r\n<p>To reduce social reconnaissance attacks, a company must train its employees about what information they cannot share with others within and outside the company. Employees should never share sensitive information on any social platform. If an employee shares any confidential information with unknown persons or outside users, the company must take appropriate action against the employee.</p>\r\n<h3>Public reconnaissance attacks</h3>\r\n<p>In this type of attack, a hacker collects information about the target from public domains. Companies share location and business model information on their websites. A hacker can use this information to determine the location of the target. From this information, a hacker can also determine what kind of infrastructure the target uses. For example, most web hosting companies share information about their servers and security equipment. Companies share this information to attract new customers and gain the trust of existing customers. Hackers can use this information to find vulnerabilities in the company\'s network.</p>\r\n<p>To mitigate public reconnaissance attacks, companies should not share confidential information on public platforms. For business requirements, if a company wants to share information about its infrastructure, instead of sharing exact hardware information, it should share generic information. Generic information will fulfill the business requirement. From generic information, a hacker can\'t guess the product information. For example, if a company uses the Cisco Firepower 4100 Firewall, it may publish that we use the Cisco Firewall.</p>\r\n<h3>Software reconnaissance attacks</h3>\r\n\r\n<p>In this type of attack, a hacker uses software tools to gather information about the target. Operating systems and software packages include many tools and utilities for debugging and troubleshooting. A hacker can use them to collect information about the network and its resources. For example, a hacker can use the <b>nslookup</b> command to perform a DNS lookup. The <b>nslookup</b> command resolves an IP address from a fully qualified domain name. Once the hacker knew the domain name of the business, the hacker can use the whois database to reveal detailed information about domain owners, mail servers, contact information, authoritative DNS servers, etc.</p>\r\n<p>In the next step, the hacker can use the <b>ping</b> command. The <b>ping</b> command sends packets to the target host. If the target host is live, the host replies to the packets. Reply packets verify that the target host is live. The following image shows the sample output of the <b>ping</b> command.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg90-01-ping-facebook.png\" alt=\"ping command\"></p>\r\n<p>In addition to the <b>ping</b> command, the hacker can also use the <b>tracert</b> command. The <b>tracert</b> command prints the path that packets use to reach the destination device. With the help of the <b>ping</b> command and the <b>tracert</b> command, a hacker can create a visual map of the target network. The following image shows an example of the <b>tracert</b> command.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg90-02-tracert-facebook.png\" alt=\"tracert command\"></p>\r\n<p>In the next step, the hacker can use port scanners to detect running services on the target host. To scan services, the hacker can use <b>nmap</b> scanner.  The following image shows a sample output of the <b>nmap</b> port scanner.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg90-03-nmap-demo.png\" alt=\"nmap command\"></p>\r\n<p>To mitigate software reconnaissance attacks, an administrator can use the following techniques: -</p>\r\n<ul class=\"ul-arrow\">\r\n  <li>	Can disable all unused ports on servers</li>\r\n  <li>	Can use the masking service to hide sensitive information on the <b>whois</b> database</li>\r\n  <li>	Can use NAT to hide the internal structure of the network</li>\r\n  <li>	Can use software or hardware firewall to filter all specious traffic</li>\r\n</ul>\r\n<p>That\'s all for this tutorial. In this tutorial, we discussed what reconnaissance attacks are and how they work in detail.</p>\r\n</div>                    </div>', 'This tutorial explains reconnaissance attacks in detail. Learn what reconnaissance attacks are, types of reconnaissance attacks, how reconnaissance attacks are performed, and how to prevent a network from reconnaissance attacks.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:11:41', '2021-09-27 03:11:41'),
(23, 1, 'ccna', 'How Man-in-the-Middle Attacks work', '<div itemprop=\"articleBody\">\r\n                      <div class=\"cnn-art-page\">\r\n<p>This tutorial explains how man-in-the-middle attacks work. Learn what a man-in-the-middle attack is and how it works through examples.</p>\r\n<div class=\"inArtABlock\">\r\n<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>A <b>man-in-the-middle</b> attack is one of the most widely used attacks that hackers use\r\n to steal sensitive information. In a <b>man-in-the-middle</b> attack, a hacker secretly\r\n  places his device on a communication path. When devices use the communication path to exchange\r\n   information, the information passes through the hacker\'s device. Since all information passes\r\n   through the hacker\'s device, the hacker can modify the information in such a way that the target\r\n    device thinks it has received this information from the device it is communicating with.</p>\r\n<p>Let\'s take an example to understand how a <b>man-in-the-middle</b> attack works.</p>\r\n<p>To communicate or exchange information with other computers, each computer on a local network\r\nneeds two addresses. These addresses are the software address and the hardware address. The software\r\naddress is called the <b>IP address</b> and the hardware address is called the <b>MAC address</b>. Computers use these\r\n two addresses to identify each other on the network.</p>\r\n<p>If a computer wants to communicate with another computer on the network, it needs to know the software\r\n and hardware addresses of that computer. If a computer knows the software address of another computer but\r\n  does not know the hardware address of that computer, it can use the <b>ARP</b> protocol. The ARP protocol\r\n  allows devices to automatically discover the hardware addresses of other devices.</p>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>The basic principle of ARP is very simple. A device that wants to\r\n know the hardware address of another device sends an ARP Request message\r\n  to the broadcast address of the network. The message includes the software address\r\n   of the other device. As the message is sent to the broadcast address of the network,\r\n    all devices on the network listen to it. The device whose software address\r\n    matches the message\'s software address replies with an ARP Reply message that includes its\r\n    hardware address. From the ARP Reply message, the computer learns the hardware address of the\r\n     other computer. Once the computer knows the hardware address of the other computer,\r\n     it can communicate with the other computer.</p>\r\n<p>To avoid repeating the same process each time when a computer wants to communicate with\r\n another computer, the computer saves the hardware address of the other computer in the ARP table.\r\n  Computers use the ARP table to store the discovered hardware addresses.</p>\r\n<p>The following image shows an example of this process.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg88-01-arp-work-flow.png\" alt=\"arp vulnerability\"></p>\r\n<p>In the above example, <b>PC-A</b> wants to communicate with the <b>Server</b>. <b>PC-A</b> knows the software address\r\n(IP address) of the <b>Sever</b> but it does not know the hardware address (MAC address) of the <b>Server</b>. So, it sends\r\nan ARP Request to the broadcast address of the network. The ARP Request reaches all hosts of the network.\r\n <b>PC-B</b> ignores the request as the request is not intended for it. The <b>Server</b> responds to the request\r\n and sends an ARP Reply to the broadcast address.  The ARP Reply reaches all hosts of the network.\r\n <b>PC-B </b>again ignores the ARP Reply as the reply does not belong to it. <b>PC-A</b> learns the hardware of the\r\n  <b>Server</b> from the ARP Reply and stores it in the ARP table.</p>\r\n<p>This is the normal workflow of an ARP operation. To use this operation to launch a <b>man-in-the-middle</b> attack, a hacker will do the following steps.</p>\r\n\r\n<p>The hacker connects his system to the network and waits for an ARP operation. When an ARP operation is going on,\r\nthe hacker monitors the operation and learns which system is sending ARP Request and which system is responding to the ARP Request.\r\nFrom ARP Request and ARP Reply messages, the hacker extracts the IP address and MAC address information. The hacker saves a copy\r\n of the ARP Reply message for the next step.</p>\r\n<p>The following image shows this process.</p>\r\n<p> <img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg88-02-man-in-middle-join.png\" alt=\"man-in-the-middle attack\"></p>\r\n<p>Once the ARP operation is over, the hacker modifies the saved ARP Reply message. He changes the value of the MAC address\r\n field. He replaces the stored MAC address with its own MAC address. Then, he sends the spoofed ARP Reply message\r\n  to the host. Address spoofing is a technique in which a hacker uses someone else\'s IP address to send packets instead of using their own IP address. To know more about this technique, you can check the following tutorial.</p>\r\n<p> <a href=\"https://www.computernetworkingnotes.com/ccna-study-guide/how-ip-address-spoofing-or-masquerading-works.html\" target=\"_blank\">How IP Address Spoofing or Masquerading Works</a></p>\r\n  <p>When the host receives this ARP Reply message, the host thinks that this new ARP Reply message contains\r\n   the most recent information, and updates the ARP table.</p>\r\n<p>The following image shows this process.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg88-03-man-in-middle-attack-sucess.png\" alt=\"man-in-the-middle attack\"></p>\r\n<p>The host uses the ARP table entries to send data packets and the entry for the Server system has been manipulated.\r\nWhen the host uses the manipulated entry to send data packets to the Server, the data packets reach the hacker\'s system.\r\nThe hacker changes the destination MAC address of data packets and reroutes them to the Server.\r\nThe hacker does the same thing with packets that flow from Server to PC.</p>\r\n<p>The following image shows this process.</p>\r\n<p><img class=\"lazyload\" data-src=\"https://www.computernetworkingnotes.org/images/cisco/ccna-study-guide/csg88-04-man-in-middle-attack-example.png\" alt=\"man-in-the-middle attack example\"></p>\r\n<p>Since packets sent from <b>PC</b> reach <b>Server</b> and packets sent from <b>Server</b> reach <b>PC</b>, <b>PC</b> and <b>Server</b> communicate without\r\nknowing that the hacker is listening to their communication. Since all packets pass through the hacker\'s system, the\r\n hacker can steal sensitive information from packets or can manipulate the data of packets to achieve his evil goals.</p>\r\n<p>That\'s all for this tutorial. In this tutorial, we discuss what a <b>man-in-the-middle</b> attack is and how it works. If you like this tutorial,\r\nplease share this tutorial on Facebook and subscribe to our YouTube channel.</p>\r\n</div>                    </div>', 'This tutorial explains how man-in-the-middle attacks work. Learn what a man-in-the-middle attack is and how it works through examples.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:11:58', '2021-09-27 03:11:58'),
(24, 1, 'ccna', 'How IP Address Spoofing or Masquerading Works Test', '\r\nThis tutorial explains how an IP address spoofing or a masquerading attack works. Learn what IP address spoofing or masquerade attacks are and how they are mitigated.\r\n\r\nWhat is IP address spoofing?\r\nIP address spoofing is a technique in which a node transmits a data packet using someone else\'s IP address. The sender node hides (fakes or masks) its IP address with someone else\'s IP address. Typically, the sender node chooses an IP address that belongs to the destination node\'s network. IP address spoofing is also known as masquerading.\r\n\r\nThe basic concept of address spoofing\r\nAn IP address is a unique identity of a computer on a network. Computers use IP addresses to communicate or exchange data with other computers on the network. To transmit a large amount of data, a computer breaks the data stream into smaller packets and transmits each data packet separately.\r\n\r\nEach data packet contains two types of address: source address and destination address. The source address represents the sender computer, and the destination address represents the recipient computer. When a computer receives a data packet, it uses the source address of the data packet to identify the sender\'s computer. To reply, the computer uses the source address of the packet as the destination address.\r\n\r\nSince the destination computer uses the source address to reply, the sender computer can fake the source address to divert the reply to another address or computer. This technique is known as IP address spoofing or masquerading. Let\'s take a simple example to understand how it works.\r\n\r\nAlbert sends a letter to Nina. But instead of writing his name and address on the sender column, he writes the name and address of Peter. When Nina receives the letter, she reads the name of Peter on the sender column and thinks that Peter sent her a letter. So, she sends a reply to Peter. Peter receives a response letter from Nina. This technique is called address spoofing.\r\n\r\nThe following image shows an example of address spoofing.\r\n\r\n\"example\r\n\r\nHow does an IP address spoofing attack work?\r\nIP address spoofing works similarly to address spoofing. To launch an IP address spoofing attack, instead of using its own IP address, a node uses a different IP address in the source address field of the packet. The destination device replies to the modified source address. In this type of attack, the sender device or the hacker does not care about the return traffic. In other words, the sender device wants the destination device to reply but does not want to receive that reply.\r\n\r\nLet\'s take an example to understand how it works.\r\n\r\nA network uses 1.0.0.0/8 address space for its internal IP addressing. The network has a server. The IP address of the server is 1.1.1.1. The server is configured to reply only requests that come from the internal network. A hacker connects to the network. The hacker sends thousands of packets per second to the server system. The hacker uses the original address in the destination address field but, in the source address field, it uses an address that belongs to the address space of the server or the internal IP address of the network. When the server receives these packets, it assumes that they arrive from the internal network, and it replies to each packet.\r\n\r\nThe following image shows this example.\r\n\r\n\"example\r\n\r\nAs you can see in the above image, the actual IP address of the source is 10.0.0.5 but, the hacker used the IP address 1.1.1.2 in the source address field of each packet. When these packets reach the server, the server assumes that they arrive from a host that belongs to the internal network. The server replies to each packet. When the replied packets reach host 1.1.1.2, the host ignores these packets as it did not request for them. This way, a hacker can engage both the server and the host at the same time.\r\n\r\nThis type of attack is mostly used as a DoS attack tool. In a DoS attack, a hacker engages a service in responding to fake requests so much that it does not have time to respond to genuine requests.\r\n\r\nHow to mitigate an IP address spoofing attack\r\nTo mitigate IP address spoofing attacks, an administrator can use a firewall. The administrator can configure the firewall to filter all incoming traffic. The administrator can create a rule on the firewall to deny all incoming packets that have an internal IP address in the source address field. This technique is known as ingress filtering.\r\n\r\nThe following image shows how ingress filtering protects the network from IP address spoofing attacks.\r\n\r\n\"ingress\r\n\r\nThe administrator can also configure the firewall to filer the outgoing traffic. The administrator can create a rule to deny all outgoing packets that do not have a valid internal IP address in the source address field. This technique is known as egress filtering. The egress filtering blocks insider hosts from launching IP address spoofing attacks on external hosts.\r\n\r\nThe following image shows how egress filtering ensures that unauthorized traffic never leaves the internal network.\r\n\r\n\"ensures\r\n\r\nThat\'s all for this tutorial. In this tutorial, we discussed how IP address spoofing attacks work and how to mitigate them.\r\n\r\n\">', 'This tutorial explains how an IP address spoofing or a masquerading attack works. Learn what IP address spoofing or masquerade attacks are and how they are mitigated.', 0, '/uploads/img/1636992765.png', '2021-09-27 03:12:14', '0000-00-00 00:00:00'),
(27, 2, 'network', 'Computer Peripheral Devices and Their Functions Explained Test', '<!-- cnnArtA -->\r\n  <ins class=\"adsbygoogle inArtA\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"3731009647\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<h3>What is a peripheral device?</h3>\r\n<p>A peripheral device is a device that either enters information into a computer system or receives information from the computer system. The normal workflow of a computer system is the following.</p>\r\n<p>It receives data and commands from the user, processes the data according to the given commands, presents the processed data to the user, and stores or prints the processed data if the user gives a command to save or print.</p>\r\n<div class=\"inArtBBlock\">\r\n<!-- ArtB -->\r\n  <ins class=\"adsbygoogle inArtB\" data-ad-client=\"ca-pub-1237473867467966\" data-ad-slot=\"5999824613\" data-full-width-responsive=\"true\"></ins>\r\n  <script>\r\n       (adsbygoogle = window.adsbygoogle || []).push({});\r\n  </script>\r\n</div>\r\n<p>Except for the components that process the given data, all other components of a computer system are known as peripheral devices.</p>\r\n<p>In simple words, if a hardware component is not part of the core components and is used either to put information into the computer system or to get information from the computer system, then it is a peripheral device. The core components of a computer system are the components that control the computer system and process the data.</p>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-01-peripheral-devices.png\" alt=\"peripheral devices\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-01-peripheral-devices.png\"></p>\r\n<p>A computer system can function without peripheral devices but it cannot function without core components. Examples of core components are CPU, motherboard, power supply, RAM, and ROM. Keyboard, mouse, monitor, printer, scanner, and USB drive are examples of peripheral devices.</p>\r\n<h2>Types of peripheral devices</h2>\r\n\r\n<p>Peripheral devices are classified into three types. These types are input devices, output devices, and input/output devices.</p>\r\n<p>An <b>input device</b> inserts data or commands into the computer system. A keyboard, mouse, scanner, barcode reader, digital pen, barcode reader, webcam, microphone are some examples of input devices.</p>\r\n<p>An <b>output device</b> receives the processed data from the computer system and presents that data to the user. A monitor, printer, speaker, headphone, and projector are some examples of output devices.</p>\r\n<p>An <b>input/output device</b> can perform both input and output functions. A hard drive, USB drive, memory card, tape drive, and NIC are some examples of input/output devices.</p>\r\n<h2>Examples of peripheral devices</h2>\r\n<p>So far we have discussed what a peripheral device is and how many types of peripheral device are. Now, let\'s discuss some most common peripheral devices and their functions.</p>\r\n<h3>Keyboard</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-02-keyboard.png\" alt=\"keyboard input device\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-02-keyboard.png\"></p>\r\n<p>A keyboard is the most common and important input device. It allows the user to enter letters, numbers, and symbols. When a user presses a key on a keyboard, the keyboard sends a unique signal to the computer. The processing unit of the computer receives the signal and translates the signal to know which key is pressed.</p>\r\n<h3>Mouse</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-03-mouse.png\" alt=\"mouse input device\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-03-mouse.png\"></p>\r\n<p>A mouse is another important input device. It uses point-and-click technology to interact with the system. Most mice have two buttons and a scroll wheel between them. To track motion, a ball was used in older mice. Modern mice use laser light to track motion.</p>\r\n<h3>Webcam</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-04-webcam.png\" alt=\"webcam\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-04-webcam.png\"></p>\r\n<p>A webcam is a popular input device. It captures live videos and photos. Usually, it is inbuilt on laptops and tablets. Mostly, it is used for video calls and live presentations.</p>\r\n<h3>Scanner</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-05-scanner.png\" alt=\"scanner\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-05-scanner.png\"></p>\r\n<p>A scanner is another popular input device. It is used to scan documents. Normally, it is used to save and use a soft copy of the document.</p>\r\n<h3>Monitor</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-06-monitor.png\" alt=\"monitor\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-06-monitor.png\"></p>\r\n<p>A monitor is one of the most important output devices. It receives output from the processing unit and displays that output. The output displayed on the monitor is temporary. Because of this, the output displayed on the monitor is called the soft copy of the output. To make it permanent, you have to store it on other output devices.</p>\r\n<h3>Printer</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-07-printer.png\" alt=\"printer\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-07-printer.png\"></p>\r\n<p>A printer is another important output device. It prints the given output. After printing, the output is permanently stored on the paper. Because of this, the output printed on the paper is called the hard copy of the output. There are mainly three types of printers: dot-matrix, inkjet, and laser. A dot printer uses pins and an ink-coated ribbon for printing. An inkjet printer uses liquid ink for printing while a laser printer uses a laser toner for printing.</p>\r\n<h3>Speaker</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-08-speaker.png\" alt=\"speaker\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-08-speaker.png\"></p>\r\n<p>A speaker is a popular output device. It plays the audio output signals. Laptops and tablets have inbuilt speakers. On desktop computers, they can be attached via ports.</p>\r\n<h3>Hard disk</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-09-hard-disk.png\" alt=\"hard disk\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-09-hard-disk.png\"></p>\r\n<p>A hard disk is the most important input/output device. It provides both input and output functionalities. When a computer reads data from the hard disk, the hard disk provides input functionality. When the computer stores data on the hard disk, the hard disk provides output functionality.</p>\r\n<h3>USB drive</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-10-usb-drive.png\" alt=\"usb drive\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-10-usb-drive.png\"></p>\r\n<p>USB drives are another popular input/output device. They are compact and small. They are mostly used to transfer data between computers that are not connected. When you transfer data from a computer to the USB drive, the USB drive provides output functionality. When you transfer data from a USB drive to the computer, the USB drive provides input functionality.</p>\r\n<h3>NIC</h3>\r\n<p><img class=\" lazyloaded\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-11-lancard.png\" alt=\"lan card\" src=\"https://www.computernetworkingnotes.org/images/networking-tutorials/nt30-11-lancard.png\"></p>\r\n<p>NIC stands for the network interface card. A NIC is an input/output device. A computer uses a NIC to connect the network. When the computer sends data to the network, it uses the output function of the NIC. When the computer receives data from the network, it uses the input function of the NIC.</p>\r\n<p>That\'s all for this tutorial. If you like this tutorial, please share it through your favorite social networking sites.</p>\r\n</div>                    </div>\">\">\">', 'IP Address Classes Explained with Examples', 0, '/uploads/img/1636992765.png', '2021-10-06 07:54:46', '0000-00-00 00:00:00'),
(28, 2, 'network', 'Computer network test', 'Test luu data vao database', 'Day la test network', 0, '/uploads/img/1636992765.png', '2021-11-15 15:54:28', '2021-11-15 15:54:28');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `username` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `token` varchar(50) DEFAULT NULL,
  `created_by` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_by` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `username`, `email`, `password`, `token`, `created_by`, `updated_by`) VALUES
(1, 'username', 'email', '$2y$10$1d3Q7aLrm6fZXA4N3kfOquOKrWeDw6jGqfaozwBlCeU0LA81kP136', '', '2021-09-25 16:38:22', '2021-09-25 09:38:22'),
(2, 'Nguyen Duc Thang', 'thang@gmail.com', '$2y$10$fmy/TRzIjXi/1QXwsy1rYePhTLk8CQxhVb/mtmRa7AGe.w9DVr1p6', '', '2021-09-27 23:46:28', '2021-09-27 16:46:28');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=29;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `posts`
--
ALTER TABLE `posts`
  ADD CONSTRAINT `posts_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
